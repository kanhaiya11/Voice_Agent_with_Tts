{"version":3,"sources":["../../src/llm/chat_context.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { AudioFrame, VideoFrame } from '@livekit/rtc-node';\nimport { createImmutableArray, shortuuid } from '../utils.js';\nimport { type ProviderFormat, toChatCtx } from './provider_format/index.js';\nimport type { JSONObject, JSONValue, ToolContext } from './tool_context.js';\n\nexport type ChatRole = 'developer' | 'system' | 'user' | 'assistant';\nexport interface ImageContent {\n  id: string;\n\n  type: 'image_content';\n\n  /**\n   * Either a string URL or a VideoFrame object.\n   */\n  image: string | VideoFrame;\n\n  inferenceDetail: 'auto' | 'high' | 'low';\n\n  inferenceWidth?: number;\n\n  inferenceHeight?: number;\n\n  mimeType?: string;\n\n  _cache: Record<any, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport interface AudioContent {\n  type: 'audio_content';\n\n  frame: AudioFrame[];\n\n  transcript?: string;\n}\n\nexport type ChatContent = ImageContent | AudioContent | string;\n\nexport function createImageContent(params: {\n  image: string | VideoFrame;\n  id?: string;\n  inferenceDetail?: 'auto' | 'high' | 'low';\n  inferenceWidth?: number;\n  inferenceHeight?: number;\n  mimeType?: string;\n}): ImageContent {\n  const {\n    image,\n    id = shortuuid('img_'),\n    inferenceDetail = 'auto',\n    inferenceWidth,\n    inferenceHeight,\n    mimeType,\n  } = params;\n\n  return {\n    id,\n    type: 'image_content',\n    image,\n    inferenceDetail,\n    inferenceWidth,\n    inferenceHeight,\n    mimeType,\n    _cache: {},\n  };\n}\n\nexport function createAudioContent(params: {\n  frame: AudioFrame[];\n  transcript?: string;\n}): AudioContent {\n  const { frame, transcript } = params;\n\n  return {\n    type: 'audio_content',\n    frame,\n    transcript,\n  };\n}\n\nexport class ChatMessage {\n  readonly id: string;\n\n  readonly type = 'message' as const;\n\n  readonly role: ChatRole;\n\n  content: ChatContent[];\n\n  interrupted: boolean;\n\n  hash?: Uint8Array;\n\n  createdAt: number;\n\n  constructor(params: {\n    role: ChatRole;\n    content: ChatContent[] | string;\n    id?: string;\n    interrupted?: boolean;\n    createdAt?: number;\n  }) {\n    const {\n      role,\n      content,\n      id = shortuuid('item_'),\n      interrupted = false,\n      createdAt = Date.now(),\n    } = params;\n    this.id = id;\n    this.role = role;\n    this.content = Array.isArray(content) ? content : [content];\n    this.interrupted = interrupted;\n    this.createdAt = createdAt;\n  }\n\n  static create(params: {\n    role: ChatRole;\n    content: ChatContent[] | string;\n    id?: string;\n    interrupted?: boolean;\n    createdAt?: number;\n  }) {\n    return new ChatMessage(params);\n  }\n\n  /**\n   * Returns a single string with all text parts of the message joined by new\n   * lines. If no string content is present, returns `null`.\n   */\n  get textContent(): string | undefined {\n    const parts = this.content.filter((c): c is string => typeof c === 'string');\n    return parts.length > 0 ? parts.join('\\n') : undefined;\n  }\n\n  toJSONContent(): JSONValue[] {\n    return this.content.map((c) => {\n      if (typeof c === 'string') {\n        return c as JSONValue;\n      } else if (c.type === 'image_content') {\n        return {\n          id: c.id,\n          type: c.type,\n          image: c.image,\n          inferenceDetail: c.inferenceDetail,\n          inferenceWidth: c.inferenceWidth,\n          inferenceHeight: c.inferenceHeight,\n          mimeType: c.mimeType,\n        } as JSONObject;\n      } else {\n        return {\n          type: c.type,\n          transcript: c.transcript,\n        } as JSONObject;\n      }\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  toJSON(excludeTimestamp: boolean = false): JSONValue {\n    const result: JSONValue = {\n      id: this.id,\n      type: this.type,\n      role: this.role,\n      content: this.toJSONContent(),\n      interrupted: this.interrupted,\n    };\n\n    if (!excludeTimestamp) {\n      result.createdAt = this.createdAt;\n    }\n\n    return result;\n  }\n}\n\nexport class FunctionCall {\n  readonly id: string;\n\n  readonly type = 'function_call' as const;\n\n  callId: string;\n\n  args: string;\n\n  name: string;\n\n  createdAt: number;\n\n  constructor(params: {\n    callId: string;\n    name: string;\n    args: string;\n    id?: string;\n    createdAt?: number;\n  }) {\n    const { callId, name, args, id = shortuuid('item_'), createdAt = Date.now() } = params;\n    this.id = id;\n    this.callId = callId;\n    this.args = args;\n    this.name = name;\n    this.createdAt = createdAt;\n  }\n\n  static create(params: {\n    callId: string;\n    name: string;\n    args: string;\n    id?: string;\n    createdAt?: number;\n  }) {\n    return new FunctionCall(params);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  toJSON(excludeTimestamp: boolean = false): JSONValue {\n    const result: JSONValue = {\n      id: this.id,\n      type: this.type,\n      callId: this.callId,\n      name: this.name,\n      args: this.args,\n    };\n\n    if (!excludeTimestamp) {\n      result.createdAt = this.createdAt;\n    }\n\n    return result;\n  }\n}\n\nexport class FunctionCallOutput {\n  readonly id: string;\n\n  readonly type = 'function_call_output' as const;\n\n  name = '';\n\n  callId: string;\n\n  output: string;\n\n  isError: boolean;\n\n  createdAt: number;\n\n  constructor(params: {\n    callId: string;\n    output: string;\n    isError: boolean;\n    id?: string;\n    createdAt?: number;\n    name?: string;\n  }) {\n    const {\n      callId,\n      output,\n      isError,\n      id = shortuuid('item_'),\n      createdAt = Date.now(),\n      name = '',\n    } = params;\n    this.id = id;\n    this.callId = callId;\n    this.output = output;\n    this.isError = isError;\n    this.name = name;\n    this.createdAt = createdAt;\n  }\n\n  static create(params: {\n    callId: string;\n    output: string;\n    isError: boolean;\n    id?: string;\n    createdAt?: number;\n    name?: string;\n  }) {\n    return new FunctionCallOutput(params);\n  }\n\n  toJSON(excludeTimestamp: boolean = false): JSONValue {\n    const result: JSONValue = {\n      id: this.id,\n      type: this.type,\n      name: this.name,\n      callId: this.callId,\n      output: this.output,\n      isError: this.isError,\n    };\n\n    if (!excludeTimestamp) {\n      result.createdAt = this.createdAt;\n    }\n\n    return result;\n  }\n}\n\nexport type ChatItem = ChatMessage | FunctionCall | FunctionCallOutput;\n\nexport class ChatContext {\n  protected _items: ChatItem[];\n\n  constructor(items?: ChatItem[]) {\n    this._items = items ? items : [];\n  }\n\n  static empty(): ChatContext {\n    return new ChatContext([]);\n  }\n\n  get items(): ChatItem[] {\n    return this._items;\n  }\n\n  set items(items: ChatItem[]) {\n    this._items = items;\n  }\n\n  /**\n   * Add a new message to the context and return it.\n   */\n  addMessage(params: {\n    role: ChatRole;\n    content: ChatContent[] | string;\n    id?: string;\n    interrupted?: boolean;\n    createdAt?: number;\n  }): ChatMessage {\n    const msg = new ChatMessage(params);\n    if (params.createdAt !== undefined) {\n      const idx = this.findInsertionIndex(params.createdAt);\n      this._items.splice(idx, 0, msg);\n    } else {\n      this._items.push(msg);\n    }\n    return msg;\n  }\n\n  /**\n   * Insert a single item or multiple items based on their `createdAt` field so\n   * that the array keeps its chronological order.\n   */\n  insert(item: ChatItem | ChatItem[]): void {\n    const arr = Array.isArray(item) ? item : [item];\n    for (const it of arr) {\n      const idx = this.findInsertionIndex(it.createdAt);\n      this._items.splice(idx, 0, it);\n    }\n  }\n\n  getById(itemId: string): ChatItem | undefined {\n    return this._items.find((i) => i.id === itemId);\n  }\n\n  indexById(itemId: string): number | undefined {\n    const idx = this._items.findIndex((i) => i.id === itemId);\n    return idx !== -1 ? idx : undefined;\n  }\n\n  copy(\n    options: {\n      excludeFunctionCall?: boolean;\n      excludeInstructions?: boolean;\n      excludeEmptyMessage?: boolean;\n      toolCtx?: ToolContext<any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n    } = {},\n  ): ChatContext {\n    const {\n      excludeFunctionCall = false,\n      excludeInstructions = false,\n      excludeEmptyMessage = false,\n      toolCtx,\n    } = options;\n    const items: ChatItem[] = [];\n\n    const isToolCallOrOutput = (item: ChatItem): item is FunctionCall | FunctionCallOutput =>\n      ['function_call', 'function_call_output'].includes(item.type);\n    const isChatMessage = (item: ChatItem): item is ChatMessage => item.type === 'message';\n\n    for (const item of this._items) {\n      if (excludeFunctionCall && isToolCallOrOutput(item)) {\n        continue;\n      }\n\n      if (\n        excludeInstructions &&\n        isChatMessage(item) &&\n        ['system', 'developer'].includes(item.role)\n      ) {\n        continue;\n      }\n\n      if (excludeEmptyMessage && isChatMessage(item) && item.content.length === 0) {\n        continue;\n      }\n\n      if (toolCtx !== undefined && isToolCallOrOutput(item) && toolCtx[item.name] === undefined) {\n        continue;\n      }\n\n      items.push(item);\n    }\n\n    return new ChatContext(items);\n  }\n\n  truncate(maxItems: number): ChatContext {\n    if (maxItems <= 0) return this;\n\n    const instructions = this._items.find((i) => i.type === 'message' && i.role === 'system') as\n      | ChatMessage\n      | undefined;\n\n    let newItems = this._items.slice(-maxItems);\n\n    // Ensure the first item is not a function-call artefact.\n    while (\n      newItems.length > 0 &&\n      ['function_call', 'function_call_output'].includes(newItems[0]!.type)\n    ) {\n      newItems.shift();\n    }\n\n    if (instructions) {\n      // At this point `instructions` is defined, so it is safe to pass to `includes`.\n      if (!newItems.includes(instructions)) {\n        newItems = [instructions, ...newItems];\n      }\n    }\n\n    // replace the items in place to keep the reference\n    this._items.splice(0, this._items.length, ...newItems);\n    return this;\n  }\n\n  toJSON(\n    options: {\n      excludeImage?: boolean;\n      excludeAudio?: boolean;\n      excludeTimestamp?: boolean;\n      excludeFunctionCall?: boolean;\n    } = {},\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): JSONObject {\n    const {\n      excludeImage = true,\n      excludeAudio = true,\n      excludeTimestamp = true,\n      excludeFunctionCall = false,\n    } = options;\n\n    const items: ChatItem[] = [];\n\n    for (const item of this._items) {\n      let processedItem = item;\n\n      if (excludeFunctionCall && ['function_call', 'function_call_output'].includes(item.type)) {\n        continue;\n      }\n\n      if (item.type === 'message') {\n        processedItem = ChatMessage.create({\n          role: item.role,\n          content: item.content,\n          id: item.id,\n          interrupted: item.interrupted,\n          createdAt: item.createdAt,\n        });\n\n        // Filter content based on options\n        if (excludeImage) {\n          processedItem.content = processedItem.content.filter((c) => {\n            return !(typeof c === 'object' && c.type === 'image_content');\n          });\n        }\n\n        if (excludeAudio) {\n          processedItem.content = processedItem.content.filter((c) => {\n            return !(typeof c === 'object' && c.type === 'audio_content');\n          });\n        }\n      }\n\n      items.push(processedItem);\n    }\n\n    return {\n      items: items.map((item) => item.toJSON(excludeTimestamp)),\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async toProviderFormat(format: ProviderFormat, injectDummyUserMessage: boolean = true) {\n    return await toChatCtx(format, this, injectDummyUserMessage);\n  }\n\n  /**\n   * Internal helper used by `truncate` & `addMessage` to find the correct\n   * insertion index for a timestamp so the list remains sorted.\n   */\n  private findInsertionIndex(createdAt: number): number {\n    for (let i = this._items.length - 1; i >= 0; i -= 1) {\n      const item = this._items[i];\n      if (item!.createdAt <= createdAt) {\n        return i + 1;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Indicates whether the context is read-only\n   */\n  get readonly(): boolean {\n    return false;\n  }\n}\n\nexport class ReadonlyChatContext extends ChatContext {\n  static readonly errorMsg =\n    'Please use .copy() and agent.update_chat_ctx() to modify the chat context.';\n\n  constructor(items: ChatItem[]) {\n    super(createImmutableArray(items, ReadonlyChatContext.errorMsg));\n  }\n\n  get items(): ChatItem[] {\n    return this._items;\n  }\n\n  set items(items: ChatItem[]) {\n    throw new Error(\n      `Cannot set items on a read-only chat context. ${ReadonlyChatContext.errorMsg}`,\n    );\n  }\n\n  get readonly(): boolean {\n    return true;\n  }\n}\n"],"mappings":"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","names":[]}