{"version":3,"sources":["../../src/llm/tool_context.type.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { describe, expect, expectTypeOf, it } from 'vitest';\nimport { z } from 'zod';\nimport { type FunctionTool, type ProviderDefinedTool, type ToolOptions, tool } from './index.js';\n\ndescribe('tool type inference', () => {\n  it('should infer argument type from zod schema', () => {\n    const toolType = tool({\n      description: 'test',\n      parameters: z.object({ number: z.number() }),\n      execute: async () => 'test' as const,\n    });\n\n    expectTypeOf(toolType).toEqualTypeOf<FunctionTool<{ number: number }, unknown, 'test'>>();\n  });\n\n  it('should infer provider defined tool type', () => {\n    const toolType = tool({\n      id: 'code-interpreter',\n      config: {\n        language: 'python',\n      },\n    });\n\n    expectTypeOf(toolType).toEqualTypeOf<ProviderDefinedTool>();\n  });\n\n  it('should infer run context type', () => {\n    const toolType = tool({\n      description: 'test',\n      parameters: z.object({ number: z.number() }),\n      execute: async ({ number }, { ctx }: ToolOptions<{ name: string }>) => {\n        return `The number is ${number}, ${ctx.userData.name}`;\n      },\n    });\n\n    expectTypeOf(toolType).toEqualTypeOf<\n      FunctionTool<{ number: number }, { name: string }, string>\n    >();\n  });\n\n  it('should not accept primitive zod schemas', () => {\n    expect(() => {\n      // @ts-expect-error - Testing that non-object schemas are rejected\n      tool({\n        name: 'test',\n        description: 'test',\n        parameters: z.string(),\n        execute: async () => 'test' as const,\n      });\n    }).toThrowError('Tool parameters must be a Zod object schema (z.object(...))');\n  });\n\n  it('should not accept array schemas', () => {\n    expect(() => {\n      // @ts-expect-error - Testing that array schemas are rejected\n      tool({\n        name: 'test',\n        description: 'test',\n        parameters: z.array(z.string()),\n        execute: async () => 'test' as const,\n      });\n    }).toThrowError('Tool parameters must be a Zod object schema (z.object(...))');\n  });\n\n  it('should not accept union schemas', () => {\n    expect(() => {\n      // @ts-expect-error - Testing that union schemas are rejected\n      tool({\n        name: 'test',\n        description: 'test',\n        parameters: z.union([z.object({ a: z.string() }), z.object({ b: z.number() })]),\n        execute: async () => 'test' as const,\n      });\n    }).toThrowError('Tool parameters must be a Zod object schema (z.object(...))');\n  });\n\n  it('should not accept non-Zod values as parameters', () => {\n    expect(() => {\n      // @ts-expect-error - Testing that non-Zod values are rejected\n      tool({\n        name: 'test',\n        description: 'test',\n        parameters: 'invalid schema',\n        execute: async () => 'test' as const,\n      });\n    }).toThrowError('Tool parameters must be a Zod object schema or a raw JSON schema');\n  });\n\n  it('should infer empty object type when parameters are omitted', () => {\n    const toolType = tool({\n      description: 'Simple action without parameters',\n      execute: async () => 'done' as const,\n    });\n\n    expectTypeOf(toolType).toEqualTypeOf<FunctionTool<Record<string, never>, unknown, 'done'>>();\n  });\n\n  it('should infer correct types with context but no parameters', () => {\n    const toolType = tool({\n      description: 'Action with context',\n      execute: async (args, { ctx }: ToolOptions<{ userId: number }>) => {\n        expectTypeOf(args).toEqualTypeOf<Record<string, never>>();\n        expectTypeOf(ctx.userData.userId).toEqualTypeOf<number>();\n        return ctx.userData.userId;\n      },\n    });\n\n    expectTypeOf(toolType).toEqualTypeOf<\n      FunctionTool<Record<string, never>, { userId: number }, number>\n    >();\n  });\n});\n"],"mappings":";AAGA,oBAAmD;AACnD,iBAAkB;AAClB,mBAAoF;AAAA,IAEpF,wBAAS,uBAAuB,MAAM;AACpC,wBAAG,8CAA8C,MAAM;AACrD,UAAM,eAAW,mBAAK;AAAA,MACpB,aAAa;AAAA,MACb,YAAY,aAAE,OAAO,EAAE,QAAQ,aAAE,OAAO,EAAE,CAAC;AAAA,MAC3C,SAAS,YAAY;AAAA,IACvB,CAAC;AAED,oCAAa,QAAQ,EAAE,cAAiE;AAAA,EAC1F,CAAC;AAED,wBAAG,2CAA2C,MAAM;AAClD,UAAM,eAAW,mBAAK;AAAA,MACpB,IAAI;AAAA,MACJ,QAAQ;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAED,oCAAa,QAAQ,EAAE,cAAmC;AAAA,EAC5D,CAAC;AAED,wBAAG,iCAAiC,MAAM;AACxC,UAAM,eAAW,mBAAK;AAAA,MACpB,aAAa;AAAA,MACb,YAAY,aAAE,OAAO,EAAE,QAAQ,aAAE,OAAO,EAAE,CAAC;AAAA,MAC3C,SAAS,OAAO,EAAE,OAAO,GAAG,EAAE,IAAI,MAAqC;AACrE,eAAO,iBAAiB,MAAM,KAAK,IAAI,SAAS,IAAI;AAAA,MACtD;AAAA,IACF,CAAC;AAED,oCAAa,QAAQ,EAAE,cAErB;AAAA,EACJ,CAAC;AAED,wBAAG,2CAA2C,MAAM;AAClD,8BAAO,MAAM;AAEX,6BAAK;AAAA,QACH,MAAM;AAAA,QACN,aAAa;AAAA,QACb,YAAY,aAAE,OAAO;AAAA,QACrB,SAAS,YAAY;AAAA,MACvB,CAAC;AAAA,IACH,CAAC,EAAE,aAAa,6DAA6D;AAAA,EAC/E,CAAC;AAED,wBAAG,mCAAmC,MAAM;AAC1C,8BAAO,MAAM;AAEX,6BAAK;AAAA,QACH,MAAM;AAAA,QACN,aAAa;AAAA,QACb,YAAY,aAAE,MAAM,aAAE,OAAO,CAAC;AAAA,QAC9B,SAAS,YAAY;AAAA,MACvB,CAAC;AAAA,IACH,CAAC,EAAE,aAAa,6DAA6D;AAAA,EAC/E,CAAC;AAED,wBAAG,mCAAmC,MAAM;AAC1C,8BAAO,MAAM;AAEX,6BAAK;AAAA,QACH,MAAM;AAAA,QACN,aAAa;AAAA,QACb,YAAY,aAAE,MAAM,CAAC,aAAE,OAAO,EAAE,GAAG,aAAE,OAAO,EAAE,CAAC,GAAG,aAAE,OAAO,EAAE,GAAG,aAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AAAA,QAC9E,SAAS,YAAY;AAAA,MACvB,CAAC;AAAA,IACH,CAAC,EAAE,aAAa,6DAA6D;AAAA,EAC/E,CAAC;AAED,wBAAG,kDAAkD,MAAM;AACzD,8BAAO,MAAM;AAEX,6BAAK;AAAA,QACH,MAAM;AAAA,QACN,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,SAAS,YAAY;AAAA,MACvB,CAAC;AAAA,IACH,CAAC,EAAE,aAAa,kEAAkE;AAAA,EACpF,CAAC;AAED,wBAAG,8DAA8D,MAAM;AACrE,UAAM,eAAW,mBAAK;AAAA,MACpB,aAAa;AAAA,MACb,SAAS,YAAY;AAAA,IACvB,CAAC;AAED,oCAAa,QAAQ,EAAE,cAAoE;AAAA,EAC7F,CAAC;AAED,wBAAG,6DAA6D,MAAM;AACpE,UAAM,eAAW,mBAAK;AAAA,MACpB,aAAa;AAAA,MACb,SAAS,OAAO,MAAM,EAAE,IAAI,MAAuC;AACjE,wCAAa,IAAI,EAAE,cAAqC;AACxD,wCAAa,IAAI,SAAS,MAAM,EAAE,cAAsB;AACxD,eAAO,IAAI,SAAS;AAAA,MACtB;AAAA,IACF,CAAC;AAED,oCAAa,QAAQ,EAAE,cAErB;AAAA,EACJ,CAAC;AACH,CAAC;","names":[]}