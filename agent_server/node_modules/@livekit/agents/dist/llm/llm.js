import { EventEmitter } from "node:events";
import { APIConnectionError, APIError } from "../_exceptions.js";
import { log } from "../log.js";
import { AsyncIterableQueue, delay, startSoon, toError } from "../utils.js";
import {} from "./chat_context.js";
class LLM extends EventEmitter {
  constructor() {
    super();
  }
  /**
   * Get the model name/identifier for this LLM instance.
   *
   * @returns The model name if available, "unknown" otherwise.
   *
   * @remarks
   * Plugins should override this property to provide their model information.
   */
  get model() {
    return "unknown";
  }
  /**
   * Pre-warm connection to the LLM service
   */
  prewarm() {
  }
  async aclose() {
  }
}
class LLMStream {
  output = new AsyncIterableQueue();
  queue = new AsyncIterableQueue();
  closed = false;
  abortController = new AbortController();
  _connOptions;
  logger = log();
  #llm;
  #chatCtx;
  #toolCtx;
  constructor(llm, {
    chatCtx,
    toolCtx,
    connOptions
  }) {
    this.#llm = llm;
    this.#chatCtx = chatCtx;
    this.#toolCtx = toolCtx;
    this._connOptions = connOptions;
    this.monitorMetrics();
    this.abortController.signal.addEventListener("abort", () => {
      this.output.close();
      this.closed = true;
    });
    startSoon(() => this.mainTask().then(() => this.queue.close()));
  }
  async mainTask() {
    for (let i = 0; i < this._connOptions.maxRetry + 1; i++) {
      try {
        return await this.run();
      } catch (error) {
        if (error instanceof APIError) {
          const retryInterval = this._connOptions._intervalForRetry(i);
          if (this._connOptions.maxRetry === 0 || !error.retryable) {
            this.emitError({ error, recoverable: false });
            throw error;
          } else if (i === this._connOptions.maxRetry) {
            this.emitError({ error, recoverable: false });
            throw new APIConnectionError({
              message: `failed to generate LLM completion after ${this._connOptions.maxRetry + 1} attempts`,
              options: { retryable: false }
            });
          } else {
            this.emitError({ error, recoverable: true });
            this.logger.warn(
              { llm: this.#llm.label(), attempt: i + 1, error },
              `failed to generate LLM completion, retrying in ${retryInterval}s`
            );
          }
          if (retryInterval > 0) {
            await delay(retryInterval);
          }
        } else {
          this.emitError({ error: toError(error), recoverable: false });
          throw error;
        }
      }
    }
  }
  emitError({ error, recoverable }) {
    this.#llm.emit("error", {
      type: "llm_error",
      timestamp: Date.now(),
      label: this.#llm.label(),
      error,
      recoverable
    });
  }
  async monitorMetrics() {
    const startTime = process.hrtime.bigint();
    let ttft = BigInt(-1);
    let requestId = "";
    let usage;
    for await (const ev of this.queue) {
      if (this.abortController.signal.aborted) {
        break;
      }
      this.output.put(ev);
      requestId = ev.id;
      if (ttft === BigInt(-1)) {
        ttft = process.hrtime.bigint() - startTime;
      }
      if (ev.usage) {
        usage = ev.usage;
      }
    }
    this.output.close();
    const duration = process.hrtime.bigint() - startTime;
    const metrics = {
      type: "llm_metrics",
      timestamp: Date.now(),
      requestId,
      ttft: ttft === BigInt(-1) ? -1 : Math.trunc(Number(ttft / BigInt(1e6))),
      duration: Math.trunc(Number(duration / BigInt(1e6))),
      cancelled: this.abortController.signal.aborted,
      label: this.#llm.label(),
      completionTokens: (usage == null ? void 0 : usage.completionTokens) || 0,
      promptTokens: (usage == null ? void 0 : usage.promptTokens) || 0,
      promptCachedTokens: (usage == null ? void 0 : usage.promptCachedTokens) || 0,
      totalTokens: (usage == null ? void 0 : usage.totalTokens) || 0,
      tokensPerSecond: (() => {
        const durationSeconds = Math.trunc(Number(duration / BigInt(1e9)));
        return durationSeconds > 0 ? ((usage == null ? void 0 : usage.completionTokens) || 0) / durationSeconds : 0;
      })()
    };
    this.#llm.emit("metrics_collected", metrics);
  }
  /** The function context of this stream. */
  get toolCtx() {
    return this.#toolCtx;
  }
  /** The initial chat context of this stream. */
  get chatCtx() {
    return this.#chatCtx;
  }
  /** The connection options for this stream. */
  get connOptions() {
    return this._connOptions;
  }
  next() {
    return this.output.next();
  }
  close() {
    this.abortController.abort();
  }
  [Symbol.asyncIterator]() {
    return this;
  }
}
export {
  LLM,
  LLMStream
};
//# sourceMappingURL=llm.js.map