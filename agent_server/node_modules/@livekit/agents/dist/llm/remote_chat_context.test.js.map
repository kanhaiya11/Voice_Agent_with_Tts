{"version":3,"sources":["../../src/llm/remote_chat_context.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { beforeEach, describe, expect, it } from 'vitest';\nimport { ChatMessage } from './chat_context.js';\nimport { RemoteChatContext } from './remote_chat_context.js';\n\nfunction createMessage(id: string, content: string): ChatMessage {\n  return new ChatMessage({ id, role: 'user', content });\n}\n\ndescribe('RemoteChatContext', () => {\n  let context: RemoteChatContext;\n\n  beforeEach(() => {\n    context = new RemoteChatContext();\n  });\n\n  describe('empty context', () => {\n    it('should return empty ChatContext', () => {\n      const chatCtx = context.toChatCtx();\n      expect(chatCtx.items).toHaveLength(0);\n    });\n\n    it('should return null for non-existent item', () => {\n      expect(context.get('nonexistent')).toBeNull();\n    });\n\n    it('should throw error when deleting non-existent item', () => {\n      expect(() => context.delete('nonexistent')).toThrow('Item with ID nonexistent not found');\n    });\n  });\n\n  describe('single item operations', () => {\n    it('should insert single item at head', () => {\n      const msg = createMessage('msg1', 'Hello');\n      context.insert(undefined, msg);\n\n      expect(context.get('msg1')).toBeDefined();\n      expect(context.get('msg1')!.item).toBe(msg);\n      expect(context.toChatCtx().items).toEqual([msg]);\n    });\n\n    it('should delete single item', () => {\n      const msg = createMessage('msg1', 'Hello');\n      context.insert(undefined, msg);\n      context.delete('msg1');\n\n      expect(context.get('msg1')).toBeNull();\n      expect(context.toChatCtx().items).toHaveLength(0);\n    });\n  });\n\n  describe('multiple item operations', () => {\n    it('should insert multiple items at head', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert(undefined, msg2);\n      context.insert(undefined, msg3);\n\n      expect(context.toChatCtx().items).toEqual([msg3, msg2, msg1]);\n    });\n\n    it('should insert items after specific nodes', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg1', msg3);\n\n      expect(context.toChatCtx().items).toEqual([msg1, msg3, msg2]);\n    });\n\n    it('should insert at tail', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n\n      expect(context.toChatCtx().items).toEqual([msg1, msg2, msg3]);\n    });\n  });\n\n  describe('deletion edge cases', () => {\n    it('should delete head node from multi-item list', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n\n      context.delete('msg1');\n      expect(context.toChatCtx().items).toEqual([msg2, msg3]);\n    });\n\n    it('should delete tail node from multi-item list', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n\n      context.delete('msg3');\n      expect(context.toChatCtx().items).toEqual([msg1, msg2]);\n    });\n\n    it('should delete middle node from multi-item list', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n\n      context.delete('msg2');\n      expect(context.toChatCtx().items).toEqual([msg1, msg3]);\n    });\n\n    it('should handle multiple deletions', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n      const msg4 = createMessage('msg4', 'Fourth');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n      context.insert('msg3', msg4);\n\n      context.delete('msg2');\n      context.delete('msg4');\n      expect(context.toChatCtx().items).toEqual([msg1, msg3]);\n\n      context.delete('msg1');\n      expect(context.toChatCtx().items).toEqual([msg3]);\n\n      context.delete('msg3');\n      expect(context.toChatCtx().items).toHaveLength(0);\n    });\n  });\n\n  describe('error conditions', () => {\n    it('should throw error when inserting duplicate ID', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg1', 'Duplicate');\n\n      context.insert(undefined, msg1);\n      expect(() => context.insert(undefined, msg2)).toThrow('Item with ID msg1 already exists.');\n    });\n\n    it('should throw error when inserting after non-existent ID', () => {\n      const msg = createMessage('msg1', 'Hello');\n      expect(() => context.insert('nonexistent', msg)).toThrow(\n        'previousItemId nonexistent not found',\n      );\n    });\n\n    it('should throw error when deleting non-existent ID', () => {\n      expect(() => context.delete('nonexistent')).toThrow('Item with ID nonexistent not found');\n    });\n  });\n\n  describe('complex scenarios', () => {\n    it('should handle interleaved inserts and deletes', () => {\n      const msg1 = createMessage('msg1', 'A');\n      const msg2 = createMessage('msg2', 'B');\n      const msg3 = createMessage('msg3', 'C');\n      const msg4 = createMessage('msg4', 'D');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.delete('msg1');\n      context.insert('msg2', msg3);\n      context.insert(undefined, msg4);\n\n      expect(context.toChatCtx().items).toEqual([msg4, msg2, msg3]);\n    });\n\n    it('should maintain correct pointers after complex operations', () => {\n      const msg1 = createMessage('msg1', 'A');\n      const msg2 = createMessage('msg2', 'B');\n      const msg3 = createMessage('msg3', 'C');\n      const msg4 = createMessage('msg4', 'D');\n      const msg5 = createMessage('msg5', 'E');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n      context.insert('msg1', msg4);\n      context.insert('msg4', msg5);\n\n      expect(context.toChatCtx().items).toEqual([msg1, msg4, msg5, msg2, msg3]);\n\n      context.delete('msg4');\n      expect(context.toChatCtx().items).toEqual([msg1, msg5, msg2, msg3]);\n\n      context.delete('msg1');\n      expect(context.toChatCtx().items).toEqual([msg5, msg2, msg3]);\n\n      context.delete('msg2');\n      expect(context.toChatCtx().items).toEqual([msg5, msg3]);\n    });\n\n    it('should handle rebuilding from scratch', () => {\n      const messages = Array.from({ length: 10 }, (_, i) =>\n        createMessage(`msg${i}`, `Content ${i}`),\n      );\n\n      for (const msg of messages) {\n        context.insert(undefined, msg);\n      }\n\n      expect(context.toChatCtx().items).toEqual([...messages].reverse());\n\n      for (let i = 0; i < 5; i++) {\n        context.delete(`msg${i}`);\n      }\n\n      const remaining = [...messages]\n        .reverse()\n        .filter((msg) => !['msg0', 'msg1', 'msg2', 'msg3', 'msg4'].includes(msg.id));\n      expect(context.toChatCtx().items).toEqual(remaining);\n    });\n  });\n\n  describe('get method', () => {\n    it('should return correct item for existing ID', () => {\n      const msg1 = createMessage('msg1', 'Hello');\n      const msg2 = createMessage('msg2', 'World');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n\n      const retrieved = context.get('msg2');\n      expect(retrieved).toBeDefined();\n      expect(retrieved!.item).toBe(msg2);\n    });\n\n    it('should return null for non-existent ID', () => {\n      const msg = createMessage('msg1', 'Hello');\n      context.insert(undefined, msg);\n\n      expect(context.get('nonexistent')).toBeNull();\n    });\n  });\n\n  describe('toChatCtx method', () => {\n    it('should preserve order in ChatContext', () => {\n      const msg1 = createMessage('msg1', 'First');\n      const msg2 = createMessage('msg2', 'Second');\n      const msg3 = createMessage('msg3', 'Third');\n\n      context.insert(undefined, msg1);\n      context.insert('msg1', msg2);\n      context.insert('msg2', msg3);\n\n      const chatCtx = context.toChatCtx();\n      expect(chatCtx.items).toEqual([msg1, msg2, msg3]);\n    });\n\n    it('should work with empty context', () => {\n      const chatCtx = context.toChatCtx();\n      expect(chatCtx.items).toHaveLength(0);\n    });\n\n    it('should create new ChatContext instance', () => {\n      const msg = createMessage('msg1', 'Hello');\n      context.insert(undefined, msg);\n\n      const chatCtx1 = context.toChatCtx();\n      const chatCtx2 = context.toChatCtx();\n\n      expect(chatCtx1).not.toBe(chatCtx2);\n      expect(chatCtx1.items).toEqual(chatCtx2.items);\n    });\n  });\n});\n"],"mappings":"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","names":[]}