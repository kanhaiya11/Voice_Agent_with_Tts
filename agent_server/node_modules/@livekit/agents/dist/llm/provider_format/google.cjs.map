{"version":3,"sources":["../../../src/llm/provider_format/google.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { ChatContext, ChatItem, ImageContent } from '../chat_context.js';\nimport { type SerializedImage, serializeImage } from '../utils.js';\nimport { groupToolCalls } from './utils.js';\n\nexport interface GoogleFormatData {\n  systemMessages: string[] | null;\n}\n\nexport async function toChatCtx(\n  chatCtx: ChatContext,\n  injectDummyUserMessage: boolean = true,\n): Promise<[Record<string, any>[], GoogleFormatData]> {\n  const turns: Record<string, any>[] = [];\n  const systemMessages: string[] = [];\n  let currentRole: string | null = null;\n  let parts: Record<string, any>[] = [];\n\n  // Flatten all grouped tool calls to get individual messages\n  const itemGroups = groupToolCalls(chatCtx);\n  const flattenedItems: ChatItem[] = [];\n\n  for (const group of itemGroups) {\n    flattenedItems.push(...group.flatten());\n  }\n\n  for (const msg of flattenedItems) {\n    // Handle system messages separately\n    if (msg.type === 'message' && msg.role === 'system' && msg.textContent) {\n      systemMessages.push(msg.textContent);\n      continue;\n    }\n\n    let role: string;\n    if (msg.type === 'message') {\n      role = msg.role === 'assistant' ? 'model' : 'user';\n    } else if (msg.type === 'function_call') {\n      role = 'model';\n    } else if (msg.type === 'function_call_output') {\n      role = 'user';\n    } else {\n      continue; // Skip unknown message types\n    }\n\n    // If the effective role changed, finalize the previous turn\n    if (role !== currentRole) {\n      if (currentRole !== null && parts.length > 0) {\n        turns.push({ role: currentRole, parts: [...parts] });\n      }\n      parts = [];\n      currentRole = role;\n    }\n\n    if (msg.type === 'message') {\n      for (const content of msg.content) {\n        if (content && typeof content === 'string') {\n          parts.push({ text: content });\n        } else if (content && typeof content === 'object') {\n          if (content.type === 'image_content') {\n            parts.push(await toImagePart(content));\n          } else {\n            // Handle other content types as JSON\n            parts.push({ text: JSON.stringify(content) });\n          }\n        }\n      }\n    } else if (msg.type === 'function_call') {\n      parts.push({\n        functionCall: {\n          id: msg.callId,\n          name: msg.name,\n          args: JSON.parse(msg.args || '{}'),\n        },\n      });\n    } else if (msg.type === 'function_call_output') {\n      const response = msg.isError ? { error: msg.output } : { output: msg.output };\n      parts.push({\n        functionResponse: {\n          id: msg.callId,\n          name: msg.name,\n          response,\n        },\n      });\n    }\n  }\n\n  // Finalize the last turn\n  if (currentRole !== null && parts.length > 0) {\n    turns.push({ role: currentRole, parts });\n  }\n\n  // Gemini requires the last message to end with user's turn before they can generate\n  if (injectDummyUserMessage && currentRole !== 'user') {\n    turns.push({ role: 'user', parts: [{ text: '.' }] });\n  }\n\n  return [\n    turns,\n    {\n      systemMessages: systemMessages.length > 0 ? systemMessages : null,\n    },\n  ];\n}\n\nasync function toImagePart(image: ImageContent): Promise<Record<string, any>> {\n  const cacheKey = 'serialized_image';\n  if (!image._cache[cacheKey]) {\n    image._cache[cacheKey] = await serializeImage(image);\n  }\n  const img: SerializedImage = image._cache[cacheKey];\n\n  if (img.externalUrl) {\n    const mimeType = img.mimeType || 'image/jpeg';\n    return {\n      fileData: {\n        fileUri: img.externalUrl,\n        mimeType,\n      },\n    };\n  }\n\n  return {\n    inlineData: {\n      data: img.base64Data,\n      mimeType: img.mimeType,\n    },\n  };\n}\n"],"mappings":"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","names":["import_utils"]}