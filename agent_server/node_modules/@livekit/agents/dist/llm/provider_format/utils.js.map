{"version":3,"sources":["../../../src/llm/provider_format/utils.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { log } from '../../log.js';\nimport type {\n  ChatContext,\n  ChatItem,\n  ChatMessage,\n  FunctionCall,\n  FunctionCallOutput,\n} from '../chat_context.js';\n\nclass ChatItemGroup {\n  message?: ChatMessage;\n  toolCalls: FunctionCall[];\n  toolOutputs: FunctionCallOutput[];\n  logger = log();\n\n  constructor(params: {\n    message?: ChatMessage;\n    toolCalls: FunctionCall[];\n    toolOutputs: FunctionCallOutput[];\n  }) {\n    this.message = params.message;\n    this.toolCalls = params.toolCalls;\n    this.toolOutputs = params.toolOutputs;\n  }\n\n  static create(params?: {\n    message?: ChatMessage;\n    toolCalls?: FunctionCall[];\n    toolOutputs?: FunctionCallOutput[];\n  }) {\n    const { message, toolCalls = [], toolOutputs = [] } = params ?? {};\n    return new ChatItemGroup({ message, toolCalls, toolOutputs });\n  }\n\n  get isEmpty() {\n    return (\n      this.message === undefined && this.toolCalls.length === 0 && this.toolOutputs.length === 0\n    );\n  }\n\n  add(item: ChatItem) {\n    if (item.type === 'message') {\n      if (this.message) {\n        throw new Error('only one message is allowed in a group');\n      }\n      this.message = item;\n    } else if (item.type === 'function_call') {\n      this.toolCalls.push(item);\n    } else if (item.type === 'function_call_output') {\n      this.toolOutputs.push(item);\n    }\n    return this;\n  }\n\n  removeInvalidToolCalls() {\n    if (this.toolCalls.length === this.toolOutputs.length) {\n      return;\n    }\n\n    const toolCallIds = new Set(this.toolCalls.map((call) => call.callId));\n    const toolOutputIds = new Set(this.toolOutputs.map((output) => output.callId));\n\n    // intersection of tool call ids and tool output ids\n    const validCallIds = intersection(toolCallIds, toolOutputIds);\n\n    // filter out tool calls that don't have a corresponding tool output\n    this.toolCalls = this.toolCalls.filter((call) => {\n      if (validCallIds.has(call.callId)) return true;\n      this.logger.warn(\n        {\n          callId: call.callId,\n          toolName: call.name,\n        },\n        'function call missing the corresponding function output, ignoring',\n      );\n      return false;\n    });\n\n    // filter out tool outputs that don't have a corresponding tool call\n    this.toolOutputs = this.toolOutputs.filter((output) => {\n      if (validCallIds.has(output.callId)) return true;\n      this.logger.warn(\n        {\n          callId: output.callId,\n          toolName: output.name,\n        },\n        'function output missing the corresponding function call, ignoring',\n      );\n      return false;\n    });\n  }\n\n  flatten() {\n    const items: ChatItem[] = [];\n    if (this.message) items.push(this.message);\n    items.push(...this.toolCalls, ...this.toolOutputs);\n    return items;\n  }\n}\n\nfunction intersection<T>(set1: Set<T>, set2: Set<T>): Set<T> {\n  return new Set([...set1].filter((item) => set2.has(item)));\n}\n\n/**\n * Group chat items (messages, function calls, and function outputs)\n * into coherent groups based on their item IDs and call IDs.\n *\n * Each group will contain:\n * - Zero or one assistant message\n * - Zero or more function/tool calls\n * - The corresponding function/tool outputs matched by call_id\n *\n * User and system messages are placed in their own individual groups.\n *\n * @param chatCtx - The chat context containing all conversation items\n * @returns A list of ChatItemGroup objects representing the grouped conversation\n */\nexport function groupToolCalls(chatCtx: ChatContext) {\n  const itemGroups: Record<string, ChatItemGroup> = {};\n  const insertionOrder: Record<string, number> = {};\n  const toolOutputs: FunctionCallOutput[] = [];\n  const logger = log();\n\n  let insertionIndex = 0;\n  for (const item of chatCtx.items) {\n    const isAssistantMessage = item.type === 'message' && item.role === 'assistant';\n    const isFunctionCall = item.type === 'function_call';\n    const isFunctionCallOutput = item.type === 'function_call_output';\n\n    if (isAssistantMessage || isFunctionCall) {\n      // only assistant messages and function calls can be grouped\n      const groupId = item.id.split('/')[0]!;\n      if (itemGroups[groupId] === undefined) {\n        itemGroups[groupId] = ChatItemGroup.create();\n\n        // we use insertion order to sort the groups as they are added to the context\n        // simulating the OrderedDict in python\n        insertionOrder[groupId] = insertionIndex;\n        insertionIndex++;\n      }\n      itemGroups[groupId]!.add(item);\n    } else if (isFunctionCallOutput) {\n      toolOutputs.push(item);\n    } else {\n      itemGroups[item.id] = ChatItemGroup.create().add(item);\n    }\n  }\n\n  // add tool outputs to their corresponding groups\n  const callIdToGroup: Record<string, ChatItemGroup> = {};\n  for (const group of Object.values(itemGroups)) {\n    for (const toolCall of group.toolCalls) {\n      callIdToGroup[toolCall.callId] = group;\n    }\n  }\n\n  for (const toolOutput of toolOutputs) {\n    const group = callIdToGroup[toolOutput.callId];\n    if (group === undefined) {\n      logger.warn(\n        { callId: toolOutput.callId, toolName: toolOutput.name },\n        'function output missing the corresponding function call, ignoring',\n      );\n      continue;\n    }\n    group.add(toolOutput);\n  }\n\n  // validate that each group and remove invalid tool calls and tool outputs\n  for (const group of Object.values(itemGroups)) {\n    group.removeInvalidToolCalls();\n  }\n\n  // sort groups by their item id\n  const orderedGroups = Object.entries(itemGroups)\n    .sort((a, b) => insertionOrder[a[0]]! - insertionOrder[b[0]]!)\n    .map(([, group]) => group);\n  return orderedGroups;\n}\n"],"mappings":"AAGA,SAAS,WAAW;AASpB,MAAM,cAAc;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS,IAAI;AAAA,EAEb,YAAY,QAIT;AACD,SAAK,UAAU,OAAO;AACtB,SAAK,YAAY,OAAO;AACxB,SAAK,cAAc,OAAO;AAAA,EAC5B;AAAA,EAEA,OAAO,OAAO,QAIX;AACD,UAAM,EAAE,SAAS,YAAY,CAAC,GAAG,cAAc,CAAC,EAAE,IAAI,UAAU,CAAC;AACjE,WAAO,IAAI,cAAc,EAAE,SAAS,WAAW,YAAY,CAAC;AAAA,EAC9D;AAAA,EAEA,IAAI,UAAU;AACZ,WACE,KAAK,YAAY,UAAa,KAAK,UAAU,WAAW,KAAK,KAAK,YAAY,WAAW;AAAA,EAE7F;AAAA,EAEA,IAAI,MAAgB;AAClB,QAAI,KAAK,SAAS,WAAW;AAC3B,UAAI,KAAK,SAAS;AAChB,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC1D;AACA,WAAK,UAAU;AAAA,IACjB,WAAW,KAAK,SAAS,iBAAiB;AACxC,WAAK,UAAU,KAAK,IAAI;AAAA,IAC1B,WAAW,KAAK,SAAS,wBAAwB;AAC/C,WAAK,YAAY,KAAK,IAAI;AAAA,IAC5B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,yBAAyB;AACvB,QAAI,KAAK,UAAU,WAAW,KAAK,YAAY,QAAQ;AACrD;AAAA,IACF;AAEA,UAAM,cAAc,IAAI,IAAI,KAAK,UAAU,IAAI,CAAC,SAAS,KAAK,MAAM,CAAC;AACrE,UAAM,gBAAgB,IAAI,IAAI,KAAK,YAAY,IAAI,CAAC,WAAW,OAAO,MAAM,CAAC;AAG7E,UAAM,eAAe,aAAa,aAAa,aAAa;AAG5D,SAAK,YAAY,KAAK,UAAU,OAAO,CAAC,SAAS;AAC/C,UAAI,aAAa,IAAI,KAAK,MAAM,EAAG,QAAO;AAC1C,WAAK,OAAO;AAAA,QACV;AAAA,UACE,QAAQ,KAAK;AAAA,UACb,UAAU,KAAK;AAAA,QACjB;AAAA,QACA;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AAGD,SAAK,cAAc,KAAK,YAAY,OAAO,CAAC,WAAW;AACrD,UAAI,aAAa,IAAI,OAAO,MAAM,EAAG,QAAO;AAC5C,WAAK,OAAO;AAAA,QACV;AAAA,UACE,QAAQ,OAAO;AAAA,UACf,UAAU,OAAO;AAAA,QACnB;AAAA,QACA;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EAEA,UAAU;AACR,UAAM,QAAoB,CAAC;AAC3B,QAAI,KAAK,QAAS,OAAM,KAAK,KAAK,OAAO;AACzC,UAAM,KAAK,GAAG,KAAK,WAAW,GAAG,KAAK,WAAW;AACjD,WAAO;AAAA,EACT;AACF;AAEA,SAAS,aAAgB,MAAc,MAAsB;AAC3D,SAAO,IAAI,IAAI,CAAC,GAAG,IAAI,EAAE,OAAO,CAAC,SAAS,KAAK,IAAI,IAAI,CAAC,CAAC;AAC3D;AAgBO,SAAS,eAAe,SAAsB;AACnD,QAAM,aAA4C,CAAC;AACnD,QAAM,iBAAyC,CAAC;AAChD,QAAM,cAAoC,CAAC;AAC3C,QAAM,SAAS,IAAI;AAEnB,MAAI,iBAAiB;AACrB,aAAW,QAAQ,QAAQ,OAAO;AAChC,UAAM,qBAAqB,KAAK,SAAS,aAAa,KAAK,SAAS;AACpE,UAAM,iBAAiB,KAAK,SAAS;AACrC,UAAM,uBAAuB,KAAK,SAAS;AAE3C,QAAI,sBAAsB,gBAAgB;AAExC,YAAM,UAAU,KAAK,GAAG,MAAM,GAAG,EAAE,CAAC;AACpC,UAAI,WAAW,OAAO,MAAM,QAAW;AACrC,mBAAW,OAAO,IAAI,cAAc,OAAO;AAI3C,uBAAe,OAAO,IAAI;AAC1B;AAAA,MACF;AACA,iBAAW,OAAO,EAAG,IAAI,IAAI;AAAA,IAC/B,WAAW,sBAAsB;AAC/B,kBAAY,KAAK,IAAI;AAAA,IACvB,OAAO;AACL,iBAAW,KAAK,EAAE,IAAI,cAAc,OAAO,EAAE,IAAI,IAAI;AAAA,IACvD;AAAA,EACF;AAGA,QAAM,gBAA+C,CAAC;AACtD,aAAW,SAAS,OAAO,OAAO,UAAU,GAAG;AAC7C,eAAW,YAAY,MAAM,WAAW;AACtC,oBAAc,SAAS,MAAM,IAAI;AAAA,IACnC;AAAA,EACF;AAEA,aAAW,cAAc,aAAa;AACpC,UAAM,QAAQ,cAAc,WAAW,MAAM;AAC7C,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,QACL,EAAE,QAAQ,WAAW,QAAQ,UAAU,WAAW,KAAK;AAAA,QACvD;AAAA,MACF;AACA;AAAA,IACF;AACA,UAAM,IAAI,UAAU;AAAA,EACtB;AAGA,aAAW,SAAS,OAAO,OAAO,UAAU,GAAG;AAC7C,UAAM,uBAAuB;AAAA,EAC/B;AAGA,QAAM,gBAAgB,OAAO,QAAQ,UAAU,EAC5C,KAAK,CAAC,GAAG,MAAM,eAAe,EAAE,CAAC,CAAC,IAAK,eAAe,EAAE,CAAC,CAAC,CAAE,EAC5D,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM,KAAK;AAC3B,SAAO;AACT;","names":[]}