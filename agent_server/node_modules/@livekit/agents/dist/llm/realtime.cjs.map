{"version":3,"sources":["../../src/llm/realtime.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { AudioFrame } from '@livekit/rtc-node';\nimport { EventEmitter } from 'events';\nimport type { ReadableStream } from 'node:stream/web';\nimport { DeferredReadableStream } from '../stream/deferred_stream.js';\nimport { Task } from '../utils.js';\nimport type { ChatContext, FunctionCall } from './chat_context.js';\nimport type { ToolChoice, ToolContext } from './tool_context.js';\n\nexport type InputSpeechStartedEvent = object;\n\nexport interface InputSpeechStoppedEvent {\n  userTranscriptionEnabled: boolean;\n}\n\nexport interface MessageGeneration {\n  messageId: string;\n  textStream: ReadableStream<string>;\n  audioStream: ReadableStream<AudioFrame>;\n}\n\nexport interface GenerationCreatedEvent {\n  messageStream: ReadableStream<MessageGeneration>;\n  functionStream: ReadableStream<FunctionCall>;\n  userInitiated: boolean;\n}\n\nexport interface RealtimeModelError {\n  type: 'realtime_model_error';\n  timestamp: number;\n  label: string;\n  error: Error;\n  recoverable: boolean;\n}\n\nexport interface RealtimeCapabilities {\n  messageTruncation: boolean;\n  turnDetection: boolean;\n  userTranscription: boolean;\n  autoToolReplyGeneration: boolean;\n}\n\nexport interface InputTranscriptionCompleted {\n  itemId: string;\n  transcript: string;\n  isFinal: boolean;\n}\n\nexport interface RealtimeSessionReconnectedEvent {}\n\nexport abstract class RealtimeModel {\n  private _capabilities: RealtimeCapabilities;\n\n  constructor(capabilities: RealtimeCapabilities) {\n    this._capabilities = capabilities;\n  }\n\n  get capabilities() {\n    return this._capabilities;\n  }\n\n  abstract session(): RealtimeSession;\n\n  abstract close(): Promise<void>;\n}\n\nexport abstract class RealtimeSession extends EventEmitter {\n  protected _realtimeModel: RealtimeModel;\n  private deferredInputStream = new DeferredReadableStream<AudioFrame>();\n  private _mainTask: Task<void>;\n\n  constructor(realtimeModel: RealtimeModel) {\n    super();\n    this._realtimeModel = realtimeModel;\n    this._mainTask = Task.from((controller) => this._mainTaskImpl(controller.signal));\n  }\n\n  get realtimeModel() {\n    return this._realtimeModel;\n  }\n\n  abstract get chatCtx(): ChatContext;\n\n  abstract get tools(): ToolContext;\n\n  abstract updateInstructions(instructions: string): Promise<void>;\n\n  /**\n   * @throws RealtimeError on Timeout\n   */\n  abstract updateChatCtx(chatCtx: ChatContext): Promise<void>;\n\n  abstract updateTools(tools: ToolContext): Promise<void>;\n\n  abstract updateOptions(options: { toolChoice?: ToolChoice | null }): void;\n\n  abstract pushAudio(frame: AudioFrame): void;\n\n  /**\n   * @throws RealtimeError on Timeout\n   */\n  abstract generateReply(instructions?: string): Promise<GenerationCreatedEvent>;\n\n  /**\n   * Commit the input audio buffer to the server\n   */\n  abstract commitAudio(): Promise<void>;\n\n  /**\n   * Clear the input audio buffer to the server\n   */\n  abstract clearAudio(): Promise<void>;\n\n  /**\n   * Cancel the current generation (do nothing if no generation is in progress)\n   */\n  abstract interrupt(): Promise<void>;\n\n  /**\n   * Truncate the message at the given audio end time\n   */\n  abstract truncate(options: { messageId: string; audioEndMs: number }): Promise<void>;\n\n  async close(): Promise<void> {\n    this._mainTask.cancel();\n  }\n\n  /**\n   * Notifies the model that user activity has started\n   */\n  startUserActivity(): void {\n    return;\n  }\n\n  private async _mainTaskImpl(signal: AbortSignal): Promise<void> {\n    const reader = this.deferredInputStream.stream.getReader();\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done || signal.aborted) {\n        break;\n      }\n      this.pushAudio(value);\n    }\n  }\n\n  setInputAudioStream(audioStream: ReadableStream<AudioFrame>): void {\n    this.deferredInputStream.setSource(audioStream);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,oBAA6B;AAE7B,6BAAuC;AACvC,mBAAqB;AA6Cd,MAAe,cAAc;AAAA,EAC1B;AAAA,EAER,YAAY,cAAoC;AAC9C,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEA,IAAI,eAAe;AACjB,WAAO,KAAK;AAAA,EACd;AAKF;AAEO,MAAe,wBAAwB,2BAAa;AAAA,EAC/C;AAAA,EACF,sBAAsB,IAAI,8CAAmC;AAAA,EAC7D;AAAA,EAER,YAAY,eAA8B;AACxC,UAAM;AACN,SAAK,iBAAiB;AACtB,SAAK,YAAY,kBAAK,KAAK,CAAC,eAAe,KAAK,cAAc,WAAW,MAAM,CAAC;AAAA,EAClF;AAAA,EAEA,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA,EA4CA,MAAM,QAAuB;AAC3B,SAAK,UAAU,OAAO;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,oBAA0B;AACxB;AAAA,EACF;AAAA,EAEA,MAAc,cAAc,QAAoC;AAC9D,UAAM,SAAS,KAAK,oBAAoB,OAAO,UAAU;AACzD,WAAO,MAAM;AACX,YAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,UAAI,QAAQ,OAAO,SAAS;AAC1B;AAAA,MACF;AACA,WAAK,UAAU,KAAK;AAAA,IACtB;AAAA,EACF;AAAA,EAEA,oBAAoB,aAA+C;AACjE,SAAK,oBAAoB,UAAU,WAAW;AAAA,EAChD;AACF;","names":[]}