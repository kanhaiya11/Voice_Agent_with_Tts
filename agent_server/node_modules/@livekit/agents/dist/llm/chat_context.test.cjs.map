{"version":3,"sources":["../../src/llm/chat_context.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { describe, expect, it } from 'vitest';\nimport {\n  type AudioContent,\n  ChatContext,\n  type ChatItem,\n  ChatMessage,\n  FunctionCall,\n  FunctionCallOutput,\n  type ImageContent,\n  ReadonlyChatContext,\n} from './chat_context.js';\n\ndescribe('ChatContext.toJSON', () => {\n  it('should match snapshot for empty context', () => {\n    const context = new ChatContext();\n    expect(context.toJSON()).toMatchSnapshot();\n  });\n\n  it('should match snapshot for simple conversation', () => {\n    const context = new ChatContext();\n\n    context.addMessage({\n      id: 'msg_system_1',\n      role: 'system',\n      content: 'You are a helpful assistant.',\n      createdAt: 1000000000,\n    });\n\n    context.addMessage({\n      id: 'msg_user_1',\n      role: 'user',\n      content: 'Hello, how are you?',\n      createdAt: 1000000001,\n    });\n\n    context.addMessage({\n      id: 'msg_assistant_1',\n      role: 'assistant',\n      content: \"I'm doing well, thank you! How can I help you today?\",\n      createdAt: 1000000002,\n    });\n\n    expect(context.toJSON()).toMatchSnapshot('simple-conversation-no-timestamps');\n\n    expect(context.toJSON({ excludeTimestamp: false })).toMatchSnapshot(\n      'simple-conversation-with-timestamps',\n    );\n  });\n\n  it('should match snapshot for multimodal content', () => {\n    const context = new ChatContext();\n\n    const imageContent: ImageContent = {\n      id: 'img_test_1',\n      type: 'image_content',\n      image: 'https://example.com/test-image.jpg',\n      inferenceDetail: 'high',\n      inferenceWidth: 1024,\n      inferenceHeight: 768,\n      mimeType: 'image/jpeg',\n      _cache: {},\n    };\n\n    const audioContent: AudioContent = {\n      type: 'audio_content',\n      frame: [], // This won't be included in JSON\n      transcript: 'This is a test audio transcript',\n    };\n\n    context.addMessage({\n      id: 'msg_user_2',\n      role: 'user',\n      content: [\n        'Check out this image and audio:',\n        imageContent,\n        audioContent,\n        'What do you think?',\n      ],\n      createdAt: 2000000000,\n    });\n\n    expect(context.toJSON()).toMatchSnapshot('multimodal-default-exclusions');\n\n    expect(\n      context.toJSON({\n        excludeImage: false,\n        excludeAudio: true,\n      }),\n    ).toMatchSnapshot('multimodal-with-images-only');\n\n    expect(\n      context.toJSON({\n        excludeImage: true,\n        excludeAudio: false,\n      }),\n    ).toMatchSnapshot('multimodal-with-audio-only');\n\n    expect(\n      context.toJSON({\n        excludeImage: false,\n        excludeAudio: false,\n        excludeTimestamp: false,\n      }),\n    ).toMatchSnapshot('multimodal-full-content');\n  });\n\n  it('should match snapshot for function calls', () => {\n    const context = new ChatContext();\n\n    context.addMessage({\n      id: 'msg_user_3',\n      role: 'user',\n      content: \"What's the weather in Paris?\",\n      createdAt: 3000000000,\n    });\n\n    const functionCall = new FunctionCall({\n      id: 'func_call_1',\n      callId: 'call_weather_123',\n      name: 'get_weather',\n      args: '{\"location\": \"Paris, France\", \"unit\": \"celsius\"}',\n      createdAt: 3000000001,\n    });\n    context.insert(functionCall);\n\n    const functionOutput = new FunctionCallOutput({\n      id: 'func_output_1',\n      callId: 'call_weather_123',\n      name: 'get_weather',\n      output: '{\"temperature\": 22, \"condition\": \"partly cloudy\", \"humidity\": 65}',\n      isError: false,\n      createdAt: 3000000002,\n    });\n    context.insert(functionOutput);\n\n    context.addMessage({\n      id: 'msg_assistant_2',\n      role: 'assistant',\n      content: 'The weather in Paris is currently 22Â°C and partly cloudy with 65% humidity.',\n      createdAt: 3000000003,\n    });\n\n    expect(context.toJSON()).toMatchSnapshot('conversation-with-function-calls');\n\n    expect(\n      context.toJSON({\n        excludeFunctionCall: true,\n      }),\n    ).toMatchSnapshot('conversation-without-function-calls');\n\n    expect(\n      context.toJSON({\n        excludeTimestamp: false,\n      }),\n    ).toMatchSnapshot('conversation-with-function-calls-and-timestamps');\n  });\n\n  it('should match snapshot for edge cases', () => {\n    const context = new ChatContext();\n\n    context.addMessage({\n      id: 'msg_empty_1',\n      role: 'user',\n      content: [],\n      createdAt: 5000000000,\n    });\n\n    const silentAudio: AudioContent = {\n      type: 'audio_content',\n      frame: [],\n      transcript: undefined,\n    };\n\n    context.addMessage({\n      id: 'msg_silent_audio',\n      role: 'user',\n      content: [silentAudio],\n      createdAt: 5000000001,\n    });\n\n    context.addMessage({\n      id: 'msg_multi_text',\n      role: 'assistant',\n      content: ['Part 1. ', 'Part 2. ', 'Part 3.'],\n      createdAt: 5000000002,\n    });\n\n    const minimalCall = new FunctionCall({\n      id: 'func_minimal',\n      callId: 'minimal',\n      name: 'test',\n      args: '{}',\n      createdAt: 5000000003,\n    });\n    context.insert(minimalCall);\n\n    const namelessOutput = new FunctionCallOutput({\n      id: 'func_output_nameless',\n      callId: 'minimal',\n      output: 'OK',\n      isError: false,\n      createdAt: 5000000004,\n    });\n    context.insert(namelessOutput);\n\n    context.addMessage({\n      id: 'msg_special_chars',\n      role: 'user',\n      content:\n        'Test with special chars: \\n\\t\\r \"quotes\" \\'apostrophes\\' \\\\backslashes\\\\ {braces} [brackets]',\n      createdAt: 5000000005,\n    });\n\n    expect(context.toJSON()).toMatchSnapshot('edge-cases-default');\n    expect(\n      context.toJSON({\n        excludeTimestamp: false,\n        excludeAudio: false,\n      }),\n    ).toMatchSnapshot('edge-cases-with-details');\n  });\n\n  it('should match snapshot for message property variations', () => {\n    const context = new ChatContext();\n\n    context.addMessage({\n      id: 'custom-message-id-123',\n      role: 'user',\n      content: 'Message with custom ID',\n      createdAt: 6000000000,\n    });\n\n    context.addMessage({\n      id: 'msg_interrupted',\n      role: 'assistant',\n      content: 'This response was interrupted...',\n      interrupted: true,\n      createdAt: 6000000001,\n    });\n\n    context.addMessage({\n      id: 'msg_dev_2',\n      role: 'developer',\n      content: 'Developer message',\n      createdAt: 6000000002,\n    });\n\n    context.addMessage({\n      id: 'msg_system_3',\n      role: 'system',\n      content: 'System message',\n      createdAt: 6000000003,\n    });\n\n    const detailedImage: ImageContent = {\n      id: 'img_detailed',\n      type: 'image_content',\n      image: 'https://example.com/image.jpg',\n      inferenceDetail: 'low',\n      inferenceWidth: 512,\n      inferenceHeight: 512,\n      mimeType: 'image/png',\n      _cache: { cached: true },\n    };\n\n    context.addMessage({\n      id: 'msg_with_image',\n      role: 'user',\n      content: ['Image with all properties:', detailedImage],\n      createdAt: 6000000004,\n    });\n\n    expect(context.toJSON()).toMatchSnapshot('message-properties-default');\n    expect(\n      context.toJSON({\n        excludeImage: false,\n        excludeTimestamp: false,\n      }),\n    ).toMatchSnapshot('message-properties-full');\n  });\n});\n\ndescribe('ReadonlyChatContext with immutable array', () => {\n  it('should have readonly property set to true', () => {\n    const items: ChatItem[] = [\n      new ChatMessage({\n        id: 'msg_1',\n        role: 'user',\n        content: ['Test'],\n        interrupted: false,\n        createdAt: Date.now(),\n      }),\n    ];\n    const readonlyContext = new ReadonlyChatContext(items);\n\n    expect(readonlyContext.readonly).toBe(true);\n  });\n\n  it('should prevent setting items property', () => {\n    const items: ChatItem[] = [\n      new ChatMessage({\n        id: 'msg_1',\n        role: 'user',\n        content: ['Test'],\n        interrupted: false,\n        createdAt: Date.now(),\n      }),\n    ];\n    const readonlyContext = new ReadonlyChatContext(items);\n    expect(() => {\n      readonlyContext.items = [];\n    }).toThrow(\n      `Cannot set items on a read-only chat context. Please use .copy() and agent.update_chat_ctx() to modify the chat context.`,\n    );\n  });\n\n  it('should prevent modifications through array methods', () => {\n    const items: ChatItem[] = [\n      new ChatMessage({\n        id: 'msg_1',\n        role: 'user',\n        content: ['Test'],\n        interrupted: false,\n        createdAt: Date.now(),\n      }),\n    ];\n    const readonlyContext = new ReadonlyChatContext(items);\n    const newItem = new ChatMessage({\n      id: 'msg_2',\n      role: 'assistant',\n      content: ['Response'],\n      interrupted: false,\n      createdAt: Date.now(),\n    });\n\n    const mutableItems = readonlyContext.items;\n    expect(() => mutableItems.push(newItem)).toThrow(\n      'Cannot call push() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.pop()).toThrow(\n      'Cannot call pop() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.shift()).toThrow(\n      'Cannot call shift() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.unshift(newItem)).toThrow(\n      'Cannot call unshift() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.splice(0, 1)).toThrow(\n      'Cannot call splice() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.sort()).toThrow(\n      'Cannot call sort() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.reverse()).toThrow(\n      'Cannot call reverse() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.fill(newItem)).toThrow(\n      'Cannot call fill() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => mutableItems.copyWithin(0, 1)).toThrow(\n      'Cannot call copyWithin() on a read-only array. Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n  });\n\n  it('should prevent bracket notation assignment and deletion', () => {\n    const items: ChatItem[] = [\n      new ChatMessage({\n        id: 'msg_1',\n        role: 'user',\n        content: ['Test'],\n        interrupted: false,\n        createdAt: Date.now(),\n      }),\n    ];\n    const readonlyContext = new ReadonlyChatContext(items);\n    const newItem = new ChatMessage({\n      id: 'msg_2',\n      role: 'assistant',\n      content: ['Response'],\n      interrupted: false,\n      createdAt: Date.now(),\n    });\n\n    expect(() => {\n      readonlyContext.items[0] = newItem;\n    }).toThrow(\n      'Cannot assign to read-only array index \"0\". Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => {\n      delete readonlyContext.items[0];\n    }).toThrow(\n      'Cannot delete read-only array index \"0\". Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n\n    expect(() => {\n      readonlyContext.items[99] = newItem;\n    }).toThrow(\n      'Cannot assign to read-only array index \"99\". Please use .copy() and agent.update_chat_ctx() to modify the chat context.',\n    );\n  });\n\n  it('should allow read operations on the immutable array', () => {\n    const items: ChatItem[] = [\n      new ChatMessage({\n        id: 'msg_1',\n        role: 'user',\n        content: ['Test 1'],\n        interrupted: false,\n        createdAt: 1000,\n      }),\n      new ChatMessage({\n        id: 'msg_2',\n        role: 'assistant',\n        content: ['Test 2'],\n        interrupted: false,\n        createdAt: 2000,\n      }),\n    ];\n    const readonlyContext = new ReadonlyChatContext(items);\n\n    expect(readonlyContext.items.length).toBe(2);\n    expect(readonlyContext.items[0]).toEqual(items[0]);\n    expect(readonlyContext.items[1]).toEqual(items[1]);\n    expect(readonlyContext.items.find((item: ChatItem) => item.id === 'msg_2')).toEqual(items[1]);\n    expect(readonlyContext.items.map((item: ChatItem) => item.id)).toEqual(['msg_1', 'msg_2']);\n    expect(\n      readonlyContext.items.filter(\n        (item: ChatItem) => item.type === 'message' && item.role === 'user',\n      ),\n    ).toHaveLength(1);\n\n    // forEach should work for reading\n    const ids: string[] = [];\n    readonlyContext.items.forEach((item) => ids.push(item.id));\n    expect(ids).toEqual(['msg_1', 'msg_2']);\n  });\n});\n"],"mappings":"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","names":[]}