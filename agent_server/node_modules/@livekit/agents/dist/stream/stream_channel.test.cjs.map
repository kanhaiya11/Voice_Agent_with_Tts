{"version":3,"sources":["../../src/stream/stream_channel.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { describe, expect, it } from 'vitest';\nimport { createStreamChannel } from './stream_channel.js';\n\ndescribe('StreamChannel', () => {\n  it('should write and read a single value', async () => {\n    const channel = createStreamChannel<string>();\n    const reader = channel.stream().getReader();\n\n    await channel.write('test value');\n    await channel.close();\n\n    const result = await reader.read();\n    expect(result.done).toBe(false);\n    expect(result.value).toBe('test value');\n\n    const nextResult = await reader.read();\n    expect(nextResult.done).toBe(true);\n  });\n\n  it('should write and read multiple values in sequence', async () => {\n    const channel = createStreamChannel<string>();\n    const reader = channel.stream().getReader();\n\n    const testValues = ['first', 'second', 'third'];\n\n    for (const value of testValues) {\n      await channel.write(value);\n    }\n    await channel.close();\n\n    const results: string[] = [];\n    let result = await reader.read();\n    while (!result.done) {\n      results.push(result.value);\n      result = await reader.read();\n    }\n\n    expect(results).toEqual(testValues);\n  });\n\n  it('should handle arrays', async () => {\n    const channel = createStreamChannel<number[]>();\n    const reader = channel.stream().getReader();\n\n    const testArray = [1, 2, 3, 4, 5];\n    await channel.write(testArray);\n    await channel.close();\n\n    const result = await reader.read();\n    expect(result.value).toEqual(testArray);\n    expect(result.value).toBe(testArray);\n  });\n\n  it('should work with concurrent writing and reading', async () => {\n    const channel = createStreamChannel<string>();\n    const reader = channel.stream().getReader();\n\n    const testData = ['chunk1', 'chunk2', 'chunk3'];\n    const results: string[] = [];\n\n    const readPromise = (async () => {\n      let result = await reader.read();\n      while (!result.done) {\n        results.push(result.value);\n        result = await reader.read();\n      }\n    })();\n\n    for (const chunk of testData) {\n      await channel.write(chunk);\n    }\n    await channel.close();\n\n    await readPromise;\n    expect(results).toEqual(testData);\n  });\n\n  it('should handle empty stream', async () => {\n    const channel = createStreamChannel<string>();\n    const reader = channel.stream().getReader();\n\n    await channel.close();\n\n    const result = await reader.read();\n    expect(result.done).toBe(true);\n  });\n\n  it('should handle non-awaited sequential writes', async () => {\n    const channel = createStreamChannel<number>();\n    const reader = channel.stream().getReader();\n\n    const testNumbers = Array.from({ length: 100 }, (_, i) => i);\n\n    for (const num of testNumbers) {\n      channel.write(num);\n    }\n    channel.close();\n\n    const results: number[] = [];\n    let result = await reader.read();\n    while (!result.done) {\n      results.push(result.value);\n      result = await reader.read();\n    }\n\n    expect(results).toEqual(testNumbers);\n  });\n\n  it('should handle double closing without error', async () => {\n    const channel = createStreamChannel<string>();\n    const reader = channel.stream().getReader();\n\n    await channel.write('test');\n\n    await channel.close();\n    // Close again - should not throw\n    await expect(channel.close()).resolves.toBeUndefined();\n\n    const result = await reader.read();\n    expect(result.done).toBe(false);\n    expect(result.value).toBe('test');\n\n    const nextResult = await reader.read();\n    expect(nextResult.done).toBe(true);\n  });\n});\n"],"mappings":"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","names":[]}