{"version":3,"sources":["../../src/stream/stream_channel.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { ReadableStream } from 'node:stream/web';\nimport { IdentityTransform } from './identity_transform.js';\n\nexport interface StreamChannel<T> {\n  write(chunk: T): Promise<void>;\n  close(): Promise<void>;\n  stream(): ReadableStream<T>;\n}\n\nexport function createStreamChannel<T>(): StreamChannel<T> {\n  const transform = new IdentityTransform<T>();\n  const writer = transform.writable.getWriter();\n\n  return {\n    write: (chunk: T) => writer.write(chunk),\n    stream: () => transform.readable,\n    close: async () => {\n      try {\n        return await writer.close();\n      } catch (e) {\n        if (e instanceof Error && e.name === 'TypeError') {\n          // Ignore error if the stream is already closed\n          return;\n        }\n        throw e;\n      }\n    },\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,gCAAkC;AAQ3B,SAAS,sBAA2C;AACzD,QAAM,YAAY,IAAI,4CAAqB;AAC3C,QAAM,SAAS,UAAU,SAAS,UAAU;AAE5C,SAAO;AAAA,IACL,OAAO,CAAC,UAAa,OAAO,MAAM,KAAK;AAAA,IACvC,QAAQ,MAAM,UAAU;AAAA,IACxB,OAAO,YAAY;AACjB,UAAI;AACF,eAAO,MAAM,OAAO,MAAM;AAAA,MAC5B,SAAS,GAAG;AACV,YAAI,aAAa,SAAS,EAAE,SAAS,aAAa;AAEhD;AAAA,QACF;AACA,cAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;","names":[]}