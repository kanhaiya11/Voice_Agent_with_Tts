{"version":3,"sources":["../src/types.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nexport class APIConnectOptions {\n  /** Maximum number of retries to connect to the API. */\n  readonly maxRetry: number;\n  /** Interval between retries to connect to the API in milliseconds. */\n  readonly retryIntervalMs: number;\n  /** Timeout for connecting to the API in milliseconds. */\n  readonly timeoutMs: number;\n\n  constructor(options: Partial<APIConnectOptions> = {}) {\n    this.maxRetry = options.maxRetry ?? 3;\n    this.retryIntervalMs = options.retryIntervalMs ?? 2000;\n    this.timeoutMs = options.timeoutMs ?? 10000;\n\n    if (this.maxRetry < 0) {\n      throw new Error('maxRetry must be greater than or equal to 0');\n    }\n    if (this.retryIntervalMs < 0) {\n      throw new Error('retryIntervalMs must be greater than or equal to 0');\n    }\n    if (this.timeoutMs < 0) {\n      throw new Error('timeoutMs must be greater than or equal to 0');\n    }\n  }\n\n  /** @internal */\n  _intervalForRetry(numRetries: number): number {\n    /**\n     * Return the interval for the given number of retries.\n     *\n     * The first retry is immediate, and then uses specified retryIntervalMs\n     */\n    if (numRetries === 0) {\n      return 0.1;\n    }\n    return this.retryIntervalMs;\n  }\n}\n\nexport const DEFAULT_API_CONNECT_OPTIONS = new APIConnectOptions();\n"],"mappings":"AAGO,MAAM,kBAAkB;AAAA;AAAA,EAEpB;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA,EAET,YAAY,UAAsC,CAAC,GAAG;AACpD,SAAK,WAAW,QAAQ,YAAY;AACpC,SAAK,kBAAkB,QAAQ,mBAAmB;AAClD,SAAK,YAAY,QAAQ,aAAa;AAEtC,QAAI,KAAK,WAAW,GAAG;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AACA,QAAI,KAAK,kBAAkB,GAAG;AAC5B,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AACA,QAAI,KAAK,YAAY,GAAG;AACtB,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAAA,EACF;AAAA;AAAA,EAGA,kBAAkB,YAA4B;AAM5C,QAAI,eAAe,GAAG;AACpB,aAAO;AAAA,IACT;AACA,WAAO,KAAK;AAAA,EACd;AACF;AAEO,MAAM,8BAA8B,IAAI,kBAAkB;","names":[]}