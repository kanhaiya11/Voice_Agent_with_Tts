{"version":3,"sources":["../src/_exceptions.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Raised when accepting a job but not receiving an assignment within the specified timeout.\n * The server may have chosen another worker to handle this job.\n */\nexport class AssignmentTimeoutError extends Error {\n  constructor(message = 'Assignment timeout occurred') {\n    super(message);\n    this.name = 'AssignmentTimeoutError';\n    Error.captureStackTrace(this, AssignmentTimeoutError);\n  }\n}\n\n/**\n * Interface for API error options\n */\ninterface APIErrorOptions {\n  body?: object | null;\n  retryable?: boolean;\n}\n\nconst API_ERROR_SYMBOL = Symbol('APIError');\n\n/**\n * Raised when an API request failed.\n * This is used on our TTS/STT/LLM plugins.\n */\nexport class APIError extends Error {\n  readonly body: object | null;\n  readonly retryable: boolean;\n\n  constructor(message: string, { body = null, retryable = true }: APIErrorOptions = {}) {\n    super(message);\n    this.name = 'APIError';\n\n    this.body = body;\n    this.retryable = retryable;\n    Error.captureStackTrace(this, APIError);\n    Object.defineProperty(this, API_ERROR_SYMBOL, {\n      value: true,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n  }\n\n  toString(): string {\n    return `${this.message} (body=${JSON.stringify(this.body)}, retryable=${this.retryable})`;\n  }\n}\n\n/**\n * Interface for API status error options\n */\ninterface APIStatusErrorOptions extends APIErrorOptions {\n  statusCode?: number;\n  requestId?: string | null;\n}\n\n/**\n * Raised when an API response has a status code of 4xx or 5xx.\n */\nexport class APIStatusError extends APIError {\n  readonly statusCode: number;\n  readonly requestId: string | null;\n\n  constructor({\n    message = 'API error.',\n    options = {},\n  }: {\n    message?: string;\n    options?: APIStatusErrorOptions;\n  }) {\n    const statusCode = options.statusCode ?? -1;\n    // 4xx errors are not retryable\n    const isRetryable = options.retryable ?? !(statusCode >= 400 && statusCode < 500);\n\n    super(message, { body: options.body, retryable: isRetryable });\n    this.name = 'APIStatusError';\n\n    this.statusCode = statusCode;\n    this.requestId = options.requestId ?? null;\n    Error.captureStackTrace(this, APIStatusError);\n  }\n\n  toString(): string {\n    return (\n      `${this.message} ` +\n      `(statusCode=${this.statusCode}, ` +\n      `requestId=${this.requestId}, ` +\n      `body=${JSON.stringify(this.body)}, ` +\n      `retryable=${this.retryable})`\n    );\n  }\n}\n\n/**\n * Raised when an API request failed due to a connection error.\n */\nexport class APIConnectionError extends APIError {\n  constructor({\n    message = 'Connection error.',\n    options = {},\n  }: {\n    message?: string;\n    options?: APIErrorOptions;\n  }) {\n    super(message, { body: null, retryable: options.retryable ?? true });\n    this.name = 'APIConnectionError';\n    Error.captureStackTrace(this, APIConnectionError);\n  }\n}\n\n/**\n * Raised when an API request timed out.\n */\nexport class APITimeoutError extends APIConnectionError {\n  constructor({\n    message = 'Request timed out.',\n    options = {},\n  }: {\n    message?: string;\n    options?: APIErrorOptions;\n  }) {\n    const retryable = options?.retryable ?? true;\n\n    super({ message, options: { retryable } });\n    this.name = 'APITimeoutError';\n    Error.captureStackTrace(this, APITimeoutError);\n  }\n}\n\nexport function isAPIError(error: unknown): error is APIError {\n  return error !== null && typeof error === 'object' && API_ERROR_SYMBOL in error;\n}\n"],"mappings":"AAOO,MAAM,+BAA+B,MAAM;AAAA,EAChD,YAAY,UAAU,+BAA+B;AACnD,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,UAAM,kBAAkB,MAAM,sBAAsB;AAAA,EACtD;AACF;AAUA,MAAM,mBAAmB,OAAO,UAAU;AAMnC,MAAM,iBAAiB,MAAM;AAAA,EACzB;AAAA,EACA;AAAA,EAET,YAAY,SAAiB,EAAE,OAAO,MAAM,YAAY,KAAK,IAAqB,CAAC,GAAG;AACpF,UAAM,OAAO;AACb,SAAK,OAAO;AAEZ,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,UAAM,kBAAkB,MAAM,QAAQ;AACtC,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,OAAO;AAAA,MACP,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEA,WAAmB;AACjB,WAAO,GAAG,KAAK,OAAO,UAAU,KAAK,UAAU,KAAK,IAAI,CAAC,eAAe,KAAK,SAAS;AAAA,EACxF;AACF;AAaO,MAAM,uBAAuB,SAAS;AAAA,EAClC;AAAA,EACA;AAAA,EAET,YAAY;AAAA,IACV,UAAU;AAAA,IACV,UAAU,CAAC;AAAA,EACb,GAGG;AACD,UAAM,aAAa,QAAQ,cAAc;AAEzC,UAAM,cAAc,QAAQ,aAAa,EAAE,cAAc,OAAO,aAAa;AAE7E,UAAM,SAAS,EAAE,MAAM,QAAQ,MAAM,WAAW,YAAY,CAAC;AAC7D,SAAK,OAAO;AAEZ,SAAK,aAAa;AAClB,SAAK,YAAY,QAAQ,aAAa;AACtC,UAAM,kBAAkB,MAAM,cAAc;AAAA,EAC9C;AAAA,EAEA,WAAmB;AACjB,WACE,GAAG,KAAK,OAAO,gBACA,KAAK,UAAU,eACjB,KAAK,SAAS,UACnB,KAAK,UAAU,KAAK,IAAI,CAAC,eACpB,KAAK,SAAS;AAAA,EAE/B;AACF;AAKO,MAAM,2BAA2B,SAAS;AAAA,EAC/C,YAAY;AAAA,IACV,UAAU;AAAA,IACV,UAAU,CAAC;AAAA,EACb,GAGG;AACD,UAAM,SAAS,EAAE,MAAM,MAAM,WAAW,QAAQ,aAAa,KAAK,CAAC;AACnE,SAAK,OAAO;AACZ,UAAM,kBAAkB,MAAM,kBAAkB;AAAA,EAClD;AACF;AAKO,MAAM,wBAAwB,mBAAmB;AAAA,EACtD,YAAY;AAAA,IACV,UAAU;AAAA,IACV,UAAU,CAAC;AAAA,EACb,GAGG;AACD,UAAM,aAAY,mCAAS,cAAa;AAExC,UAAM,EAAE,SAAS,SAAS,EAAE,UAAU,EAAE,CAAC;AACzC,SAAK,OAAO;AACZ,UAAM,kBAAkB,MAAM,eAAe;AAAA,EAC/C;AACF;AAEO,SAAS,WAAW,OAAmC;AAC5D,SAAO,UAAU,QAAQ,OAAO,UAAU,YAAY,oBAAoB;AAC5E;","names":[]}