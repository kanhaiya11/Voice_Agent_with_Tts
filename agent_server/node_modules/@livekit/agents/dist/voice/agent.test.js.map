{"version":3,"sources":["../../src/voice/agent.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { describe, expect, it } from 'vitest';\nimport { z } from 'zod';\nimport { tool } from '../llm/index.js';\nimport { Agent } from './agent.js';\n\ndescribe('Agent', () => {\n  it('should create agent with basic instructions', () => {\n    const instructions = 'You are a helpful assistant';\n    const agent = new Agent({ instructions });\n\n    expect(agent).toBeDefined();\n    expect(agent.instructions).toBe(instructions);\n  });\n\n  it('should create agent with instructions and tools', () => {\n    const instructions = 'You are a helpful assistant with tools';\n\n    // Create mock tools using the tool function\n    const mockTool1 = tool({\n      description: 'First test tool',\n      parameters: z.object({}),\n      execute: async () => 'tool1 result',\n    });\n\n    const mockTool2 = tool({\n      description: 'Second test tool',\n      parameters: z.object({\n        input: z.string().describe('Input parameter'),\n      }),\n      execute: async ({ input }) => `tool2: ${input}`,\n    });\n\n    const agent = new Agent({\n      instructions,\n      tools: {\n        getTool1: mockTool1,\n        getTool2: mockTool2,\n      },\n    });\n\n    expect(agent).toBeDefined();\n    expect(agent.instructions).toBe(instructions);\n\n    // Assert tools are set correctly\n    const agentTools = agent.toolCtx;\n    expect(Object.keys(agentTools)).toHaveLength(2);\n    expect(agentTools).toHaveProperty('getTool1');\n    expect(agentTools).toHaveProperty('getTool2');\n\n    // Verify tool properties with proper checks\n    expect(agentTools.getTool1?.description).toBe('First test tool');\n    expect(agentTools.getTool2?.description).toBe('Second test tool');\n  });\n\n  it('should return a copy of tools, not the original reference', () => {\n    const instructions = 'You are a helpful assistant';\n    const mockTool = tool({\n      description: 'Test tool',\n      parameters: z.object({}),\n      execute: async () => 'result',\n    });\n\n    const tools = { testTool: mockTool };\n    const agent = new Agent({ instructions, tools });\n\n    const tools1 = agent.toolCtx;\n    const tools2 = agent.toolCtx;\n\n    // Should return different object references\n    expect(tools1).not.toBe(tools2);\n    expect(tools1).not.toBe(tools);\n\n    // Should contain the same set of tools\n    expect(tools1).toEqual(tools2);\n    expect(tools1).toEqual(tools);\n  });\n});\n"],"mappings":"AAGA,SAAS,UAAU,QAAQ,UAAU;AACrC,SAAS,SAAS;AAClB,SAAS,YAAY;AACrB,SAAS,aAAa;AAEtB,SAAS,SAAS,MAAM;AACtB,KAAG,+CAA+C,MAAM;AACtD,UAAM,eAAe;AACrB,UAAM,QAAQ,IAAI,MAAM,EAAE,aAAa,CAAC;AAExC,WAAO,KAAK,EAAE,YAAY;AAC1B,WAAO,MAAM,YAAY,EAAE,KAAK,YAAY;AAAA,EAC9C,CAAC;AAED,KAAG,mDAAmD,MAAM;AAjB9D;AAkBI,UAAM,eAAe;AAGrB,UAAM,YAAY,KAAK;AAAA,MACrB,aAAa;AAAA,MACb,YAAY,EAAE,OAAO,CAAC,CAAC;AAAA,MACvB,SAAS,YAAY;AAAA,IACvB,CAAC;AAED,UAAM,YAAY,KAAK;AAAA,MACrB,aAAa;AAAA,MACb,YAAY,EAAE,OAAO;AAAA,QACnB,OAAO,EAAE,OAAO,EAAE,SAAS,iBAAiB;AAAA,MAC9C,CAAC;AAAA,MACD,SAAS,OAAO,EAAE,MAAM,MAAM,UAAU,KAAK;AAAA,IAC/C,CAAC;AAED,UAAM,QAAQ,IAAI,MAAM;AAAA,MACtB;AAAA,MACA,OAAO;AAAA,QACL,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAED,WAAO,KAAK,EAAE,YAAY;AAC1B,WAAO,MAAM,YAAY,EAAE,KAAK,YAAY;AAG5C,UAAM,aAAa,MAAM;AACzB,WAAO,OAAO,KAAK,UAAU,CAAC,EAAE,aAAa,CAAC;AAC9C,WAAO,UAAU,EAAE,eAAe,UAAU;AAC5C,WAAO,UAAU,EAAE,eAAe,UAAU;AAG5C,YAAO,gBAAW,aAAX,mBAAqB,WAAW,EAAE,KAAK,iBAAiB;AAC/D,YAAO,gBAAW,aAAX,mBAAqB,WAAW,EAAE,KAAK,kBAAkB;AAAA,EAClE,CAAC;AAED,KAAG,6DAA6D,MAAM;AACpE,UAAM,eAAe;AACrB,UAAM,WAAW,KAAK;AAAA,MACpB,aAAa;AAAA,MACb,YAAY,EAAE,OAAO,CAAC,CAAC;AAAA,MACvB,SAAS,YAAY;AAAA,IACvB,CAAC;AAED,UAAM,QAAQ,EAAE,UAAU,SAAS;AACnC,UAAM,QAAQ,IAAI,MAAM,EAAE,cAAc,MAAM,CAAC;AAE/C,UAAM,SAAS,MAAM;AACrB,UAAM,SAAS,MAAM;AAGrB,WAAO,MAAM,EAAE,IAAI,KAAK,MAAM;AAC9B,WAAO,MAAM,EAAE,IAAI,KAAK,KAAK;AAG7B,WAAO,MAAM,EAAE,QAAQ,MAAM;AAC7B,WAAO,MAAM,EAAE,QAAQ,KAAK;AAAA,EAC9B,CAAC;AACH,CAAC;","names":[]}