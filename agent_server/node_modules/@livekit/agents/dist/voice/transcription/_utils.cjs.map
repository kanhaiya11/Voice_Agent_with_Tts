{"version":3,"sources":["../../../src/voice/transcription/_utils.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { LocalParticipant, Participant, Room } from '@livekit/rtc-node';\nimport { TrackSource } from '@livekit/rtc-node';\n\nexport function findMicrophoneTrackId(room: Room, identity: string): string {\n  let p: Participant | LocalParticipant | null = room.remoteParticipants.get(identity) ?? null;\n  if (identity === room.localParticipant?.identity) {\n    p = room.localParticipant;\n  }\n\n  if (p === null) {\n    throw new Error(`Participant ${identity} not found`);\n  }\n\n  for (const track of p.trackPublications.values()) {\n    if (track.source === TrackSource.SOURCE_MICROPHONE && track.sid) {\n      // find the first microphone track\n      return track.sid;\n    }\n  }\n\n  throw new Error(`Participant ${identity} does not have a microphone track`);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,sBAA4B;AAErB,SAAS,sBAAsB,MAAY,UAA0B;AAN5E;AAOE,MAAI,IAA2C,KAAK,mBAAmB,IAAI,QAAQ,KAAK;AACxF,MAAI,eAAa,UAAK,qBAAL,mBAAuB,WAAU;AAChD,QAAI,KAAK;AAAA,EACX;AAEA,MAAI,MAAM,MAAM;AACd,UAAM,IAAI,MAAM,eAAe,QAAQ,YAAY;AAAA,EACrD;AAEA,aAAW,SAAS,EAAE,kBAAkB,OAAO,GAAG;AAChD,QAAI,MAAM,WAAW,4BAAY,qBAAqB,MAAM,KAAK;AAE/D,aAAO,MAAM;AAAA,IACf;AAAA,EACF;AAEA,QAAM,IAAI,MAAM,eAAe,QAAQ,mCAAmC;AAC5E;","names":[]}