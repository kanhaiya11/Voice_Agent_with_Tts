{"version":3,"sources":["../../src/voice/run_context.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { FunctionCall } from '../llm/chat_context.js';\nimport type { AgentSession } from './agent_session.js';\nimport type { SpeechHandle } from './speech_handle.js';\n\nexport type UnknownUserData = unknown;\n\nexport class RunContext<UserData = UnknownUserData> {\n  private readonly initialStepIdx: number;\n  constructor(\n    public readonly session: AgentSession<UserData>,\n    public readonly speechHandle: SpeechHandle,\n    public readonly functionCall: FunctionCall,\n  ) {\n    this.initialStepIdx = speechHandle.numSteps - 1;\n  }\n  get userData(): UserData {\n    return this.session.userData;\n  }\n\n  /**\n   * Waits for the speech playout corresponding to this function call step.\n   *\n   * Unlike {@link SpeechHandle.waitForPlayout}, which waits for the full\n   * assistant turn to complete (including all function tools),\n   * this method only waits for the assistant's spoken response prior to running\n   * this tool to finish playing.\n   */\n  async waitForPlayout() {\n    return this.speechHandle._waitForGeneration(this.initialStepIdx);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASO,MAAM,WAAuC;AAAA,EAElD,YACkB,SACA,cACA,cAChB;AAHgB;AACA;AACA;AAEhB,SAAK,iBAAiB,aAAa,WAAW;AAAA,EAChD;AAAA,EAPiB;AAAA,EAQjB,IAAI,WAAqB;AACvB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,iBAAiB;AACrB,WAAO,KAAK,aAAa,mBAAmB,KAAK,cAAc;AAAA,EACjE;AACF;","names":[]}