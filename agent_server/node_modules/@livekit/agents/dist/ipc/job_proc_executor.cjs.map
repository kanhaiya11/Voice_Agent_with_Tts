{"version":3,"sources":["../../src/ipc/job_proc_executor.ts","../../../node_modules/.pnpm/tsup@8.4.0_@microsoft+api-extractor@7.43.7_@types+node@22.15.30__postcss@8.4.38_tsx@4.20.4_typescript@5.4.5/node_modules/tsup/assets/cjs_shims.js"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { ChildProcess } from 'node:child_process';\nimport { fork } from 'node:child_process';\nimport type { RunningJobInfo } from '../job.js';\nimport { log } from '../log.js';\nimport type { InferenceExecutor } from './inference_executor.js';\nimport type { JobExecutor } from './job_executor.js';\nimport { JobStatus } from './job_executor.js';\nimport type { IPCMessage } from './message.js';\nimport { SupervisedProc } from './supervised_proc.js';\n\nexport class JobProcExecutor extends SupervisedProc implements JobExecutor {\n  #userArgs?: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #jobStatus?: JobStatus;\n  #runningJob?: RunningJobInfo;\n  #agent: string;\n  #inferenceExecutor?: InferenceExecutor;\n  #inferenceTasks: Promise<void>[] = [];\n  #logger = log();\n\n  constructor(\n    agent: string,\n    inferenceExecutor: InferenceExecutor | undefined,\n    initializeTimeout: number,\n    closeTimeout: number,\n    memoryWarnMB: number,\n    memoryLimitMB: number,\n    pingInterval: number,\n    pingTimeout: number,\n    highPingThreshold: number,\n  ) {\n    super(\n      initializeTimeout,\n      closeTimeout,\n      memoryWarnMB,\n      memoryLimitMB,\n      pingInterval,\n      pingTimeout,\n      highPingThreshold,\n    );\n    this.#agent = agent;\n    this.#inferenceExecutor = inferenceExecutor;\n  }\n\n  get status(): JobStatus {\n    if (this.#jobStatus) {\n      return this.#jobStatus;\n    }\n    throw new Error('job status not available');\n  }\n\n  get userArguments(): any {\n    return this.#userArgs;\n  }\n\n  set userArguments(args: any) {\n    this.#userArgs = args;\n  }\n\n  get runningJob(): RunningJobInfo | undefined {\n    return this.#runningJob;\n  }\n\n  createProcess(): ChildProcess {\n    return fork(new URL('./job_proc_lazy_main.js', import.meta.url), [this.#agent]);\n  }\n\n  async mainTask(proc: ChildProcess) {\n    proc.on('message', (msg: IPCMessage) => {\n      switch (msg.case) {\n        case 'inferenceRequest':\n          this.#inferenceTasks.push(this.#doInferenceTask(proc, msg.value));\n      }\n    });\n  }\n\n  async #doInferenceTask(\n    proc: ChildProcess,\n    req: { method: string; requestId: string; data: unknown },\n  ) {\n    if (!this.#inferenceExecutor) {\n      this.#logger.warn('inference request received but no inference executor');\n      proc.send({\n        case: 'inferenceResponse',\n        value: { requestId: req.requestId, error: new Error('no inference executor') },\n      });\n      return;\n    }\n\n    try {\n      const data = await this.#inferenceExecutor.doInference(req.method, req.data);\n      proc.send({ case: 'inferenceResponse', value: { requestId: req.requestId, data } });\n    } catch (error) {\n      proc.send({ case: 'inferenceResponse', value: { requestId: req.requestId, error } });\n    }\n  }\n\n  async launchJob(info: RunningJobInfo) {\n    if (this.#runningJob) {\n      throw Error('process already has a running job');\n    }\n    if (!this.init.done) {\n      throw Error('process not initialized');\n    }\n    this.#jobStatus = JobStatus.RUNNING;\n    this.#runningJob = info;\n\n    this.proc!.send({ case: 'startJobRequest', value: { runningJob: info } });\n  }\n}\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;ACKA,IAAM,mBAAmB,MACvB,OAAO,aAAa,cAChB,IAAI,IAAI,QAAQ,UAAU,EAAE,EAAE,OAC7B,SAAS,iBAAiB,SAAS,cAAc,OAClD,IAAI,IAAI,WAAW,SAAS,OAAO,EAAE;AAEpC,IAAM,gBAAgC,iCAAiB;ADP9D,gCAAqB;AAErB,iBAAoB;AAGpB,0BAA0B;AAE1B,6BAA+B;AAExB,MAAM,wBAAwB,sCAAsC;AAAA,EACzE;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,kBAAmC,CAAC;AAAA,EACpC,cAAU,gBAAI;AAAA,EAEd,YACE,OACA,mBACA,mBACA,cACA,cACA,eACA,cACA,aACA,mBACA;AACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,SAAK,SAAS;AACd,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EAEA,IAAI,SAAoB;AACtB,QAAI,KAAK,YAAY;AACnB,aAAO,KAAK;AAAA,IACd;AACA,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAAA,EAEA,IAAI,gBAAqB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,cAAc,MAAW;AAC3B,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,IAAI,aAAyC;AAC3C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,gBAA8B;AAC5B,eAAO,gCAAK,IAAI,IAAI,2BAA2B,aAAe,GAAG,CAAC,KAAK,MAAM,CAAC;AAAA,EAChF;AAAA,EAEA,MAAM,SAAS,MAAoB;AACjC,SAAK,GAAG,WAAW,CAAC,QAAoB;AACtC,cAAQ,IAAI,MAAM;AAAA,QAChB,KAAK;AACH,eAAK,gBAAgB,KAAK,KAAK,iBAAiB,MAAM,IAAI,KAAK,CAAC;AAAA,MACpE;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,iBACJ,MACA,KACA;AACA,QAAI,CAAC,KAAK,oBAAoB;AAC5B,WAAK,QAAQ,KAAK,sDAAsD;AACxE,WAAK,KAAK;AAAA,QACR,MAAM;AAAA,QACN,OAAO,EAAE,WAAW,IAAI,WAAW,OAAO,IAAI,MAAM,uBAAuB,EAAE;AAAA,MAC/E,CAAC;AACD;AAAA,IACF;AAEA,QAAI;AACF,YAAM,OAAO,MAAM,KAAK,mBAAmB,YAAY,IAAI,QAAQ,IAAI,IAAI;AAC3E,WAAK,KAAK,EAAE,MAAM,qBAAqB,OAAO,EAAE,WAAW,IAAI,WAAW,KAAK,EAAE,CAAC;AAAA,IACpF,SAAS,OAAO;AACd,WAAK,KAAK,EAAE,MAAM,qBAAqB,OAAO,EAAE,WAAW,IAAI,WAAW,MAAM,EAAE,CAAC;AAAA,IACrF;AAAA,EACF;AAAA,EAEA,MAAM,UAAU,MAAsB;AACpC,QAAI,KAAK,aAAa;AACpB,YAAM,MAAM,mCAAmC;AAAA,IACjD;AACA,QAAI,CAAC,KAAK,KAAK,MAAM;AACnB,YAAM,MAAM,yBAAyB;AAAA,IACvC;AACA,SAAK,aAAa,8BAAU;AAC5B,SAAK,cAAc;AAEnB,SAAK,KAAM,KAAK,EAAE,MAAM,mBAAmB,OAAO,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,EAC1E;AACF;","names":[]}