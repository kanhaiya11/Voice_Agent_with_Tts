{"version":3,"sources":["../../../src/tokenize/basic/sentence.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Split the text into sentences.\n */\nexport const splitSentences = (\n  text: string,\n  minLength = 20,\n  retainFormat: boolean = false,\n): [string, number, number][] => {\n  const alphabets = /([A-Za-z])/g;\n  const prefixes = /(Mr|St|Mrs|Ms|Dr)[.]/g;\n  const suffixes = /(Inc|Ltd|Jr|Sr|Co)/g;\n  const starters =\n    /(Mr|Mrs|Ms|Dr|Prof|Capt|Cpt|Lt|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)/g;\n  const acronyms = /([A-Z][.][A-Z][.](?:[A-Z][.])?)/g;\n  const websites = /[.](com|net|org|io|gov|edu|me)/g;\n  const digits = /([0-9])/g;\n  const dots = /\\.{2,}/g;\n\n  if (retainFormat) {\n    text = text.replaceAll('\\n', '<nel><stop>');\n  } else {\n    text = text.replaceAll('\\n', ' ');\n  }\n\n  text = text.replaceAll(prefixes, '$1<prd>');\n  text = text.replaceAll(websites, '<prd>$2');\n  text = text.replaceAll(new RegExp(`${digits.source}[.]${digits.source}`, 'g'), '$1<prd>$2');\n  text = text.replaceAll(dots, (match) => '<prd>'.repeat(match.length));\n  text = text.replaceAll('Ph.D.', 'Ph<prd>D<prd>');\n  text = text.replaceAll(new RegExp(`\\\\s${alphabets.source}[.] `, 'g'), ' $1<prd> ');\n  text = text.replaceAll(new RegExp(`${acronyms.source} ${starters.source}`, 'g'), '$1<stop> $2');\n  text = text.replaceAll(\n    new RegExp(`${alphabets.source}[.]${alphabets.source}[.]${alphabets.source}[.]`, 'g'),\n    '$1<prd>$2<prd>$3<prd>',\n  );\n  text = text.replaceAll(\n    new RegExp(`${alphabets.source}[.]${alphabets.source}[.]`, 'g'),\n    '$1<prd>$2<prd>',\n  );\n  text = text.replaceAll(\n    new RegExp(` ${suffixes.source}[.] ${starters.source}`, 'g'),\n    '$1<stop> $2',\n  );\n  text = text.replaceAll(new RegExp(` ${suffixes.source}[.]`, 'g'), '$1<prd>');\n  text = text.replaceAll(new RegExp(` ${alphabets.source}[.]`, 'g'), '$1<prd>');\n  text = text.replaceAll('.”', '”.');\n  text = text.replaceAll('.\"', '\".');\n  text = text.replaceAll('!\"', '\"!');\n  text = text.replaceAll('?\"', '\"?');\n  text = text.replaceAll('.', '.<stop>');\n  text = text.replaceAll('?', '?<stop>');\n  text = text.replaceAll('!', '!<stop>');\n  text = text.replaceAll('<prd>', '.');\n\n  if (retainFormat) {\n    text = text.replaceAll('<nel>', '\\n');\n  }\n\n  const split = text.split('<stop>');\n  text = text.replaceAll('<stop>', '');\n\n  const sentences: [string, number, number][] = [];\n  let buf = '';\n  let start = 0;\n  let end = 0;\n  const prePad = retainFormat ? '' : ' ';\n  for (const match of split) {\n    const sentence = retainFormat ? match : match.trim();\n    if (!sentence) continue;\n\n    buf += prePad + sentence;\n    end += match.length;\n    if (buf.length > minLength) {\n      sentences.push([buf.slice(prePad.length), start, end]);\n      start = end;\n      buf = '';\n    }\n  }\n\n  if (buf) {\n    sentences.push([buf.slice(prePad.length), start, text.length - 1]);\n  }\n\n  return sentences;\n};\n"],"mappings":"AAOO,MAAM,iBAAiB,CAC5B,MACA,YAAY,IACZ,eAAwB,UACO;AAC/B,QAAM,YAAY;AAClB,QAAM,WAAW;AACjB,QAAM,WAAW;AACjB,QAAM,WACJ;AACF,QAAM,WAAW;AACjB,QAAM,WAAW;AACjB,QAAM,SAAS;AACf,QAAM,OAAO;AAEb,MAAI,cAAc;AAChB,WAAO,KAAK,WAAW,MAAM,aAAa;AAAA,EAC5C,OAAO;AACL,WAAO,KAAK,WAAW,MAAM,GAAG;AAAA,EAClC;AAEA,SAAO,KAAK,WAAW,UAAU,SAAS;AAC1C,SAAO,KAAK,WAAW,UAAU,SAAS;AAC1C,SAAO,KAAK,WAAW,IAAI,OAAO,GAAG,OAAO,MAAM,MAAM,OAAO,MAAM,IAAI,GAAG,GAAG,WAAW;AAC1F,SAAO,KAAK,WAAW,MAAM,CAAC,UAAU,QAAQ,OAAO,MAAM,MAAM,CAAC;AACpE,SAAO,KAAK,WAAW,SAAS,eAAe;AAC/C,SAAO,KAAK,WAAW,IAAI,OAAO,MAAM,UAAU,MAAM,QAAQ,GAAG,GAAG,WAAW;AACjF,SAAO,KAAK,WAAW,IAAI,OAAO,GAAG,SAAS,MAAM,IAAI,SAAS,MAAM,IAAI,GAAG,GAAG,aAAa;AAC9F,SAAO,KAAK;AAAA,IACV,IAAI,OAAO,GAAG,UAAU,MAAM,MAAM,UAAU,MAAM,MAAM,UAAU,MAAM,OAAO,GAAG;AAAA,IACpF;AAAA,EACF;AACA,SAAO,KAAK;AAAA,IACV,IAAI,OAAO,GAAG,UAAU,MAAM,MAAM,UAAU,MAAM,OAAO,GAAG;AAAA,IAC9D;AAAA,EACF;AACA,SAAO,KAAK;AAAA,IACV,IAAI,OAAO,IAAI,SAAS,MAAM,OAAO,SAAS,MAAM,IAAI,GAAG;AAAA,IAC3D;AAAA,EACF;AACA,SAAO,KAAK,WAAW,IAAI,OAAO,IAAI,SAAS,MAAM,OAAO,GAAG,GAAG,SAAS;AAC3E,SAAO,KAAK,WAAW,IAAI,OAAO,IAAI,UAAU,MAAM,OAAO,GAAG,GAAG,SAAS;AAC5E,SAAO,KAAK,WAAW,WAAM,SAAI;AACjC,SAAO,KAAK,WAAW,MAAM,IAAI;AACjC,SAAO,KAAK,WAAW,MAAM,IAAI;AACjC,SAAO,KAAK,WAAW,MAAM,IAAI;AACjC,SAAO,KAAK,WAAW,KAAK,SAAS;AACrC,SAAO,KAAK,WAAW,KAAK,SAAS;AACrC,SAAO,KAAK,WAAW,KAAK,SAAS;AACrC,SAAO,KAAK,WAAW,SAAS,GAAG;AAEnC,MAAI,cAAc;AAChB,WAAO,KAAK,WAAW,SAAS,IAAI;AAAA,EACtC;AAEA,QAAM,QAAQ,KAAK,MAAM,QAAQ;AACjC,SAAO,KAAK,WAAW,UAAU,EAAE;AAEnC,QAAM,YAAwC,CAAC;AAC/C,MAAI,MAAM;AACV,MAAI,QAAQ;AACZ,MAAI,MAAM;AACV,QAAM,SAAS,eAAe,KAAK;AACnC,aAAW,SAAS,OAAO;AACzB,UAAM,WAAW,eAAe,QAAQ,MAAM,KAAK;AACnD,QAAI,CAAC,SAAU;AAEf,WAAO,SAAS;AAChB,WAAO,MAAM;AACb,QAAI,IAAI,SAAS,WAAW;AAC1B,gBAAU,KAAK,CAAC,IAAI,MAAM,OAAO,MAAM,GAAG,OAAO,GAAG,CAAC;AACrD,cAAQ;AACR,YAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI,KAAK;AACP,cAAU,KAAK,CAAC,IAAI,MAAM,OAAO,MAAM,GAAG,OAAO,KAAK,SAAS,CAAC,CAAC;AAAA,EACnE;AAEA,SAAO;AACT;","names":[]}