import { FfiClient, FfiClientEvent, FfiHandle } from "./ffi_client.js";
import { NewVideoStreamRequest, VideoStreamType } from "./proto/video_frame_pb.js";
import { VideoFrame } from "./video_frame.js";
class VideoStreamSource {
  constructor(track) {
    this.onEvent = (ev) => {
      if (!this.controller) {
        throw new Error("Stream controller not initialized");
      }
      if (ev.message.case != "videoStreamEvent" || ev.message.value.streamHandle != this.ffiHandle.handle) {
        return;
      }
      const streamEvent = ev.message.value.message;
      switch (streamEvent.case) {
        case "frameReceived":
          const rotation = streamEvent.value.rotation;
          const timestampUs = streamEvent.value.timestampUs;
          const frame = VideoFrame.fromOwnedInfo(streamEvent.value.buffer);
          const value = { rotation, timestampUs, frame };
          const videoFrameEvent = {
            frame: value.frame,
            timestampUs: value.timestampUs,
            rotation: value.rotation
          };
          this.controller.enqueue(videoFrameEvent);
          break;
        case "eos":
          FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);
          this.controller.close();
          break;
      }
    };
    const req = new NewVideoStreamRequest({
      type: VideoStreamType.VIDEO_STREAM_NATIVE,
      trackHandle: track.ffi_handle.handle
    });
    const res = FfiClient.instance.request({
      message: {
        case: "newVideoStream",
        value: req
      }
    });
    this.ffiHandle = new FfiHandle(res.stream.handle.id);
    FfiClient.instance.on(FfiClientEvent.FfiEvent, this.onEvent);
  }
  start(controller) {
    this.controller = controller;
  }
  cancel() {
    FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);
    this.ffiHandle.dispose();
  }
}
class VideoStream extends ReadableStream {
  constructor(track) {
    super(new VideoStreamSource(track));
  }
}
export {
  VideoStream
};
//# sourceMappingURL=video_stream.js.map