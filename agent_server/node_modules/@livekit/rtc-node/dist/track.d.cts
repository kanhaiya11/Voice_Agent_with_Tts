import { AudioSource } from './audio_source.cjs';
import './ffi_client.cjs';
import { TrackInfo, OwnedTrack, TrackKind, StreamState } from './proto/track_pb.cjs';
import { VideoSource } from './video_source.cjs';
import { FfiHandle } from './napi/native.d.cjs';
import './audio_frame.cjs';
import './proto/audio_frame_pb.cjs';
import '@bufbuild/protobuf';
import './proto/handle_pb.cjs';
import '@livekit/typed-emitter';
import './proto/ffi_pb.cjs';
import './proto/room_pb.cjs';
import './proto/participant_pb.cjs';
import './proto/stats_pb.cjs';
import './proto/video_frame_pb.cjs';
import './proto/e2ee_pb.cjs';
import './proto/data_stream_pb.cjs';
import './proto/rpc_pb.cjs';
import './proto/track_publication_pb.cjs';
import './video_frame.cjs';

declare abstract class Track {
    /** @internal */
    info?: TrackInfo;
    /** @internal */
    ffi_handle: FfiHandle;
    constructor(owned: OwnedTrack);
    get sid(): string | undefined;
    get name(): string | undefined;
    get kind(): TrackKind | undefined;
    get stream_state(): StreamState | undefined;
    get muted(): boolean | undefined;
    close(): Promise<void>;
}
declare class LocalAudioTrack extends Track {
    private source?;
    constructor(owned: OwnedTrack, source?: AudioSource);
    static createAudioTrack(name: string, source: AudioSource): LocalAudioTrack;
    close(closeSource?: boolean): Promise<void>;
}
declare class LocalVideoTrack extends Track {
    private source?;
    constructor(owned: OwnedTrack, source?: VideoSource);
    static createVideoTrack(name: string, source: VideoSource): LocalVideoTrack;
    close(closeSource?: boolean): Promise<void>;
}
declare class RemoteVideoTrack extends Track {
    constructor(owned: OwnedTrack);
}
declare class RemoteAudioTrack extends Track {
    constructor(owned: OwnedTrack);
}
type LocalTrack = LocalVideoTrack | LocalAudioTrack;
type RemoteTrack = RemoteVideoTrack | RemoteAudioTrack;
type AudioTrack = LocalAudioTrack | RemoteAudioTrack;
type VideoTrack = LocalVideoTrack | RemoteVideoTrack;

export { type AudioTrack, LocalAudioTrack, type LocalTrack, LocalVideoTrack, RemoteAudioTrack, type RemoteTrack, RemoteVideoTrack, Track, type VideoTrack };
