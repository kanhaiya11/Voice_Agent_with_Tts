{"version":3,"sources":["../src/audio_stream.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { UnderlyingSource } from 'node:stream/web';\nimport { AudioFrame } from './audio_frame.js';\nimport type { FfiEvent } from './ffi_client.js';\nimport { FfiClient, FfiClientEvent, FfiHandle } from './ffi_client.js';\nimport type { NewAudioStreamResponse } from './proto/audio_frame_pb.js';\nimport { AudioStreamType, NewAudioStreamRequest } from './proto/audio_frame_pb.js';\nimport type { Track } from './track.js';\n\nexport interface AudioStreamOptions {\n  noiseCancellation?: NoiseCancellationOptions;\n  sampleRate?: number;\n  numChannels?: number;\n  frameSizeMs?: number;\n}\n\nexport interface NoiseCancellationOptions {\n  moduleId: string;\n  options: Record<string, any>;\n}\n\nclass AudioStreamSource implements UnderlyingSource<AudioFrame> {\n  private controller?: ReadableStreamDefaultController<AudioFrame>;\n  private ffiHandle: FfiHandle;\n  private sampleRate: number;\n  private numChannels: number;\n  private ncOptions?: NoiseCancellationOptions;\n  private frameSizeMs?: number;\n\n  constructor(\n    track: Track,\n    sampleRateOrOptions?: number | AudioStreamOptions,\n    numChannels?: number,\n  ) {\n    if (sampleRateOrOptions !== undefined && typeof sampleRateOrOptions !== 'number') {\n      this.sampleRate = sampleRateOrOptions.sampleRate ?? 48000;\n      this.numChannels = sampleRateOrOptions.numChannels ?? 1;\n      this.ncOptions = sampleRateOrOptions.noiseCancellation;\n      this.frameSizeMs = sampleRateOrOptions.frameSizeMs;\n    } else {\n      this.sampleRate = (sampleRateOrOptions as number) ?? 48000;\n      this.numChannels = numChannels ?? 1;\n    }\n\n    const req = new NewAudioStreamRequest({\n      type: AudioStreamType.AUDIO_STREAM_NATIVE,\n      trackHandle: track.ffi_handle.handle,\n      sampleRate: this.sampleRate,\n      numChannels: this.numChannels,\n      frameSizeMs: this.frameSizeMs,\n      ...(this.ncOptions\n        ? {\n            audioFilterModuleId: this.ncOptions.moduleId,\n            audioFilterOptions: JSON.stringify(this.ncOptions.options),\n          }\n        : {}),\n    });\n\n    const res = FfiClient.instance.request<NewAudioStreamResponse>({\n      message: {\n        case: 'newAudioStream',\n        value: req,\n      },\n    });\n\n    this.ffiHandle = new FfiHandle(res.stream!.handle!.id!);\n\n    FfiClient.instance.on(FfiClientEvent.FfiEvent, this.onEvent);\n  }\n\n  private onEvent = (ev: FfiEvent) => {\n    if (!this.controller) {\n      throw new Error('Stream controller not initialized');\n    }\n\n    if (\n      ev.message.case != 'audioStreamEvent' ||\n      ev.message.value.streamHandle != this.ffiHandle.handle\n    ) {\n      return;\n    }\n\n    const streamEvent = ev.message.value.message;\n    switch (streamEvent.case) {\n      case 'frameReceived':\n        const frame = AudioFrame.fromOwnedInfo(streamEvent.value.frame!);\n        this.controller.enqueue(frame);\n        break;\n      case 'eos':\n        FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);\n        this.controller.close();\n        break;\n    }\n  };\n\n  start(controller: ReadableStreamDefaultController<AudioFrame>) {\n    this.controller = controller;\n  }\n\n  cancel() {\n    FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);\n    this.ffiHandle.dispose();\n  }\n}\n\nexport class AudioStream extends ReadableStream<AudioFrame> {\n  constructor(track: Track);\n  constructor(track: Track, sampleRate: number);\n  constructor(track: Track, sampleRate: number, numChannels: number);\n  constructor(track: Track, options: AudioStreamOptions);\n  constructor(\n    track: Track,\n    sampleRateOrOptions?: number | AudioStreamOptions,\n    numChannels?: number,\n  ) {\n    super(new AudioStreamSource(track, sampleRateOrOptions, numChannels));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,yBAA2B;AAE3B,wBAAqD;AAErD,4BAAuD;AAevD,MAAM,kBAA0D;AAAA,EAQ9D,YACE,OACA,qBACA,aACA;AAqCF,SAAQ,UAAU,CAAC,OAAiB;AAClC,UAAI,CAAC,KAAK,YAAY;AACpB,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACrD;AAEA,UACE,GAAG,QAAQ,QAAQ,sBACnB,GAAG,QAAQ,MAAM,gBAAgB,KAAK,UAAU,QAChD;AACA;AAAA,MACF;AAEA,YAAM,cAAc,GAAG,QAAQ,MAAM;AACrC,cAAQ,YAAY,MAAM;AAAA,QACxB,KAAK;AACH,gBAAM,QAAQ,8BAAW,cAAc,YAAY,MAAM,KAAM;AAC/D,eAAK,WAAW,QAAQ,KAAK;AAC7B;AAAA,QACF,KAAK;AACH,sCAAU,SAAS,IAAI,iCAAe,UAAU,KAAK,OAAO;AAC5D,eAAK,WAAW,MAAM;AACtB;AAAA,MACJ;AAAA,IACF;AA3DE,QAAI,wBAAwB,UAAa,OAAO,wBAAwB,UAAU;AAChF,WAAK,aAAa,oBAAoB,cAAc;AACpD,WAAK,cAAc,oBAAoB,eAAe;AACtD,WAAK,YAAY,oBAAoB;AACrC,WAAK,cAAc,oBAAoB;AAAA,IACzC,OAAO;AACL,WAAK,aAAc,uBAAkC;AACrD,WAAK,cAAc,eAAe;AAAA,IACpC;AAEA,UAAM,MAAM,IAAI,4CAAsB;AAAA,MACpC,MAAM,sCAAgB;AAAA,MACtB,aAAa,MAAM,WAAW;AAAA,MAC9B,YAAY,KAAK;AAAA,MACjB,aAAa,KAAK;AAAA,MAClB,aAAa,KAAK;AAAA,MAClB,GAAI,KAAK,YACL;AAAA,QACE,qBAAqB,KAAK,UAAU;AAAA,QACpC,oBAAoB,KAAK,UAAU,KAAK,UAAU,OAAO;AAAA,MAC3D,IACA,CAAC;AAAA,IACP,CAAC;AAED,UAAM,MAAM,4BAAU,SAAS,QAAgC;AAAA,MAC7D,SAAS;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AAED,SAAK,YAAY,IAAI,4BAAU,IAAI,OAAQ,OAAQ,EAAG;AAEtD,gCAAU,SAAS,GAAG,iCAAe,UAAU,KAAK,OAAO;AAAA,EAC7D;AAAA,EA2BA,MAAM,YAAyD;AAC7D,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,SAAS;AACP,gCAAU,SAAS,IAAI,iCAAe,UAAU,KAAK,OAAO;AAC5D,SAAK,UAAU,QAAQ;AAAA,EACzB;AACF;AAEO,MAAM,oBAAoB,eAA2B;AAAA,EAK1D,YACE,OACA,qBACA,aACA;AACA,UAAM,IAAI,kBAAkB,OAAO,qBAAqB,WAAW,CAAC;AAAA,EACtE;AACF;","names":[]}