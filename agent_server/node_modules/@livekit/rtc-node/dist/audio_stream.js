import { AudioFrame } from "./audio_frame.js";
import { FfiClient, FfiClientEvent, FfiHandle } from "./ffi_client.js";
import { AudioStreamType, NewAudioStreamRequest } from "./proto/audio_frame_pb.js";
class AudioStreamSource {
  constructor(track, sampleRateOrOptions, numChannels) {
    this.onEvent = (ev) => {
      if (!this.controller) {
        throw new Error("Stream controller not initialized");
      }
      if (ev.message.case != "audioStreamEvent" || ev.message.value.streamHandle != this.ffiHandle.handle) {
        return;
      }
      const streamEvent = ev.message.value.message;
      switch (streamEvent.case) {
        case "frameReceived":
          const frame = AudioFrame.fromOwnedInfo(streamEvent.value.frame);
          this.controller.enqueue(frame);
          break;
        case "eos":
          FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);
          this.controller.close();
          break;
      }
    };
    if (sampleRateOrOptions !== void 0 && typeof sampleRateOrOptions !== "number") {
      this.sampleRate = sampleRateOrOptions.sampleRate ?? 48e3;
      this.numChannels = sampleRateOrOptions.numChannels ?? 1;
      this.ncOptions = sampleRateOrOptions.noiseCancellation;
      this.frameSizeMs = sampleRateOrOptions.frameSizeMs;
    } else {
      this.sampleRate = sampleRateOrOptions ?? 48e3;
      this.numChannels = numChannels ?? 1;
    }
    const req = new NewAudioStreamRequest({
      type: AudioStreamType.AUDIO_STREAM_NATIVE,
      trackHandle: track.ffi_handle.handle,
      sampleRate: this.sampleRate,
      numChannels: this.numChannels,
      frameSizeMs: this.frameSizeMs,
      ...this.ncOptions ? {
        audioFilterModuleId: this.ncOptions.moduleId,
        audioFilterOptions: JSON.stringify(this.ncOptions.options)
      } : {}
    });
    const res = FfiClient.instance.request({
      message: {
        case: "newAudioStream",
        value: req
      }
    });
    this.ffiHandle = new FfiHandle(res.stream.handle.id);
    FfiClient.instance.on(FfiClientEvent.FfiEvent, this.onEvent);
  }
  start(controller) {
    this.controller = controller;
  }
  cancel() {
    FfiClient.instance.off(FfiClientEvent.FfiEvent, this.onEvent);
    this.ffiHandle.dispose();
  }
}
class AudioStream extends ReadableStream {
  constructor(track, sampleRateOrOptions, numChannels) {
    super(new AudioStreamSource(track, sampleRateOrOptions, numChannels));
  }
}
export {
  AudioStream
};
//# sourceMappingURL=audio_stream.js.map