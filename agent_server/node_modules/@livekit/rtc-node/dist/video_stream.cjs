"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var video_stream_exports = {};
__export(video_stream_exports, {
  VideoStream: () => VideoStream
});
module.exports = __toCommonJS(video_stream_exports);
var import_ffi_client = require("./ffi_client.cjs");
var import_video_frame_pb = require("./proto/video_frame_pb.cjs");
var import_video_frame = require("./video_frame.cjs");
class VideoStreamSource {
  constructor(track) {
    this.onEvent = (ev) => {
      if (!this.controller) {
        throw new Error("Stream controller not initialized");
      }
      if (ev.message.case != "videoStreamEvent" || ev.message.value.streamHandle != this.ffiHandle.handle) {
        return;
      }
      const streamEvent = ev.message.value.message;
      switch (streamEvent.case) {
        case "frameReceived":
          const rotation = streamEvent.value.rotation;
          const timestampUs = streamEvent.value.timestampUs;
          const frame = import_video_frame.VideoFrame.fromOwnedInfo(streamEvent.value.buffer);
          const value = { rotation, timestampUs, frame };
          const videoFrameEvent = {
            frame: value.frame,
            timestampUs: value.timestampUs,
            rotation: value.rotation
          };
          this.controller.enqueue(videoFrameEvent);
          break;
        case "eos":
          import_ffi_client.FfiClient.instance.off(import_ffi_client.FfiClientEvent.FfiEvent, this.onEvent);
          this.controller.close();
          break;
      }
    };
    const req = new import_video_frame_pb.NewVideoStreamRequest({
      type: import_video_frame_pb.VideoStreamType.VIDEO_STREAM_NATIVE,
      trackHandle: track.ffi_handle.handle
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "newVideoStream",
        value: req
      }
    });
    this.ffiHandle = new import_ffi_client.FfiHandle(res.stream.handle.id);
    import_ffi_client.FfiClient.instance.on(import_ffi_client.FfiClientEvent.FfiEvent, this.onEvent);
  }
  start(controller) {
    this.controller = controller;
  }
  cancel() {
    import_ffi_client.FfiClient.instance.off(import_ffi_client.FfiClientEvent.FfiEvent, this.onEvent);
    this.ffiHandle.dispose();
  }
}
class VideoStream extends ReadableStream {
  constructor(track) {
    super(new VideoStreamSource(track));
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VideoStream
});
//# sourceMappingURL=video_stream.cjs.map